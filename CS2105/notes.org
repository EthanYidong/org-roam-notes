:PROPERTIES:
:ID:       D1F12114-39AC-40DC-98D0-7B6F67DEC041
:END:

#+title: CS2105 Notes
#+filetags: :CS2105:

- links :: [[id:192A0605-67DE-4277-9FEF-5C16C81937F8][CS2105]]

* Internet
:PROPERTIES:
:ID:       3E696C35-46F4-4C10-98C9-584A8D60616C
:END:

- Internet is made up of routers
  - Data packets are sent through the network from source to destination

* Data Transmission
:PROPERTIES:
:ID:       A6B358C8-8DF4-4D6D-84C3-E91031768743
:END:
- Packet switching
  - Users under the same router share its resources
  - Resources are not reserved, used on demand
    - A result of this is that packets may take different paths
    - Congestion is possible
  - Bits sent over a link which represent packets
    - Timing is a product of maximum bandwidth and propagation delay
  - Routers implement store and forward
    - Entire packet must reach the router before it will forward to the next stop in the network
    - This adds additional delay to the transmission
    - This is for the purpose for:
      - Integrity Checks

* Network Conditions
:PROPERTIES:
:ID:       EC0E367A-1B1E-4ED4-B493-B1AF845FF108
:END:

- links :: [[id:1F24CF84-A241-4317-AC6D-C4C4683F34DF][CS2105 Exams]]
** Packet Loss
:PROPERTIES:
:ID:       1D1E365F-4870-4C9D-ADE5-054FF94FA514
:END:
- Packet loss may occur when the router's buffer is full
- Connectivity issues may occur (both wired and wireless)
- Signal noise may result in corrupted packets

** Packet Delay
:PROPERTIES:
:ID:       86A82389-CC39-4780-8D82-E05918A03EFF
:END:

*** Processing Delay
:PROPERTIES:
:ID:       83010D99-9421-44DC-B1B7-9350ED7945B6
:END:
- Generally ignored
- How long it takes to process the packet (check for integrity, determine what to do with the packet)

*** Queueing Delay
:PROPERTIES:
:ID:       8AA81F32-434F-47F8-BE09-B6162306640D
:END:
- Generally ignored
- Time taken waiting for the router to finish processing packets that arrived before

*** Transmission Delay
:PROPERTIES:
:ID:       8C08E406-EC45-4D89-BF95-FE4A5A5505FE
:END:
- Limited by bandwidth of the connection
- "How long do I have to wait before can I send the next bit?"
- $\frac{\text{bits per time}}{\text{number of bits}}$

*** Propagation Delay
:PROPERTIES:
:ID:       5AA300BB-EFBE-4AAF-BBD3-1550EA76D34B
:END:
- Limited by the speed of the signal along the connection.
- "How long does it take for the data to go from point A to point B"?
- $\frac{\text{length of connection}}{\text{speed of data through connection}}$

* Network Protocols
:PROPERTIES:
:ID:       f2612135-5501-4169-a391-b27184c99a12
:END:
- The [[id:3E696C35-46F4-4C10-98C9-584A8D60616C][Internet]] supports many various kinds of network applications
  - The Web, VoIP, email, games, etc.

* Transport Services
:PROPERTIES:
:ID:       d6f93509-cb17-4d83-bd33-e41fdf15577e
:END:
- Closely tied to the [[id:dff0f2f7-2b30-48bd-8fb5-220db2076834][Transport Layer]]
- Needs:
  - Data Integrity
    - "Is the data correct?"
  - Timing
    - "Is the data recent?"
  - Throughput
    - "Is the data fast?"
  - Security

* OSI Layers
:PROPERTIES:
:ID:       e0360e0e-695b-4db0-8bda-f1ab12bd6019
:END:
- The OSI Layer Model is a structure that can be used to describe the way data is transmitted and used by computers
** Packet Layer
:PROPERTIES:
:ID:       7e0f0d9b-1e1c-4e54-ba6a-4887208ed730
:END:
- 1st layer of the [[id:e0360e0e-695b-4db0-8bda-f1ab12bd6019][OSI Layers]]
** Data Link Layer
:PROPERTIES:
:ID:       491f607a-a390-4694-8544-1fce9a3a7d86
:END:
- 2nd layer of the [[id:e0360e0e-695b-4db0-8bda-f1ab12bd6019][OSI Layers]]
** Network Layer
:PROPERTIES:
:ID:       5d0b0590-fd98-4db1-89f1-f8f38bd11bb7
:END:
- 3rd layer of the [[id:e0360e0e-695b-4db0-8bda-f1ab12bd6019][OSI Layers]]
** Transport Layer
:PROPERTIES:
:ID:       dff0f2f7-2b30-48bd-8fb5-220db2076834
:END:
- 4th layer of the [[id:e0360e0e-695b-4db0-8bda-f1ab12bd6019][OSI Layers]]
- Runs in hosts:
  - Sender side:
    - Break message into segments and pass to the [[id:5d0b0590-fd98-4db1-89f1-f8f38bd11bb7][Network Layer]]
  - Receiver side:
    - Reassembles segments into message and pass to the [[id:89296f19-c817-43a7-8ef6-013e697d32ab][Application Layer]]
  - In between:
    - Check destination IP to decide routing
** Session Layer
:PROPERTIES:
:ID:       256fc6cf-5e0a-4cd0-bf54-c5b62c290dcc
:END:
- 5th layer of the [[id:e0360e0e-695b-4db0-8bda-f1ab12bd6019][OSI Layers]]
- Grouped under the [[id:89296f19-c817-43a7-8ef6-013e697d32ab][Application Layer]] for [[id:192A0605-67DE-4277-9FEF-5C16C81937F8][CS2105]]
** Presentation Layer
:PROPERTIES:
:ID:       4c5e16a5-d378-40ca-875b-566705d10018
:END:
- 6th layer of the [[id:e0360e0e-695b-4db0-8bda-f1ab12bd6019][OSI Layers]]
- Grouped under the [[id:89296f19-c817-43a7-8ef6-013e697d32ab][Application Layer]] for [[id:192A0605-67DE-4277-9FEF-5C16C81937F8][CS2105]]
** Application Layer
:PROPERTIES:
:ID:       89296f19-c817-43a7-8ef6-013e697d32ab
:END:
- 7th layer of the [[id:e0360e0e-695b-4db0-8bda-f1ab12bd6019][OSI Layers]]

* The Web
:PROPERTIES:
:ID:       d81d3738-a08e-498a-ae6b-1118a0341de1
:END:
- An application of the [[id:3E696C35-46F4-4C10-98C9-584A8D60616C][Internet]]
* TCP
:PROPERTIES:
:ID:       458a323f-763b-458e-9ce8-7b7fb008a473
:END:
- [[id:dff0f2f7-2b30-48bd-8fb5-220db2076834][Transport Layer]] protocol
- Well ordered
- [[file:media/transport-diagram-tcp_1.png][TCP]]
* UDP
:PROPERTIES:
:ID:       be4e6279-b595-4fcf-befc-06d57273d988
:END:
- [[id:dff0f2f7-2b30-48bd-8fb5-220db2076834][Transport Layer]] protocol
- No ordering
- Adds very little to [[id:c66bc940-0321-468b-86c1-21ae30542ab4][IP]]
  - Multiplexing data on the sender into many packets
  - Demultiplexing packets on the receiver into the original data
  - Checksum
- When a UDP receiver receives a UDP segment,
  1. It checks the destination port from the segment
  2. The UDP segment is sent to the socket for that port
  3. IP Datagrams (with possibly different sources) with the same port are directed to the same UDP port
- [[file:media/transport-diagram-udp_1.png][UDP]]
- Checksum calculation:
  - Treat the segment as a sequence of 16-bit integers
  - Add all 16-bit integers in the sequence together
  - Any carries are also added to the checksum in the lowest significant bit
  - Get the 1s complement to find the checksum
    - This is just flipping all the bits
* Round Trip Timing
:PROPERTIES:
:ID:       be2e19da-7142-44a9-8707-6e6f3412d46f
:ROAM_ALIASES: RTT
:END:
- The amount of time taken for a packet to be sent from client to server and for a reply to be received.
* HTTP
:PROPERTIES:
:ID:       b8499489-7b0e-4fbe-a5aa-367e4cf88e81
:END:
- The [[id:89296f19-c817-43a7-8ef6-013e697d32ab][Application Layer]] protocol for [[id:d81d3738-a08e-498a-ae6b-1118a0341de1][The Web]]
- Uses [[id:458a323f-763b-458e-9ce8-7b7fb008a473][TCP]] as the [[id:dff0f2f7-2b30-48bd-8fb5-220db2076834][Transport Layer]]
** HTTP 1.0
:PROPERTIES:
:ID:       7f45ae07-bd4b-4322-8d0f-77a2c1fb90e2
:END:
- links :: [[id:1F24CF84-A241-4317-AC6D-C4C4683F34DF][CS2105 Exams]]
- Non-persistant HTTP connection
  - Each object needs 2 [[id:be2e19da-7142-44a9-8707-6e6f3412d46f][RTTs]]
  - Time taken to send data is based on [[id:86A82389-CC39-4780-8D82-E05918A03EFF][Packet Delay]]
  - Timing of message = $2 \times \text{RTT} + \text{HTTP Header Time} + \text{Data Time}$
  - Note that speed is often given in bits per second, while size is given in bytes.

** HTTP 1.1
:PROPERTIES:
:ID:       279fe9cd-959c-49e1-839f-712e446c45e9
:END:
- links :: [[id:1F24CF84-A241-4317-AC6D-C4C4683F34DF][CS2105 Exams]]
- Persistant HTTP connection
  - The TCP connection is opened once across all objects (1 [[id:be2e19da-7142-44a9-8707-6e6f3412d46f][RTT]])
  - Multiple objects can be grouped together with one request, so each group also requires one request (1 [[id:be2e19da-7142-44a9-8707-6e6f3412d46f][RTT]])
    - This occurs when the client knows that it needs multiple resources to be fetched.
  - If there is time where the computer does not know what it needs to be fetching, it will need to idle until it knows.
  - Time taken to send data is based on [[id:86A82389-CC39-4780-8D82-E05918A03EFF][Packet Delay]]
  - Timing across all messages = $\text{RTT} \times (\text{Number of Objects} + 1) + \text{Data Time} + \text{Idle Time}$
  - Note that the speed is often given in bits per second, while size is given in bytes.
* IP
:PROPERTIES:
:ID:       c66bc940-0321-468b-86c1-21ae30542ab4
:END:
- [[id:5d0b0590-fd98-4db1-89f1-f8f38bd11bb7][Network Layer]] service of the internet
* [[id:c66bc940-0321-468b-86c1-21ae30542ab4][IP]] Address
:PROPERTIES:
:ID:       11fd492e-05ef-4acd-818c-60fdcc28ae46
:END:
- 32 bit(IPv4) or 128 bit(IPv6) that identifies a node in a network
- IPv4 addresses look like [0-255].[0-255].[0-255].[0-255]
* Domain Name System
:PROPERTIES:
:ID:       a3ae3cdc-5328-402e-8c47-177e942fa4fb
:ROAM_ALIASES: DNS
:END:
- Two ways to identify a host:
  - Hostname: www.example.org
  - [[id:11fd492e-05ef-4acd-818c-60fdcc28ae46][IP Address]]: 93.184.216.34
- Hostnames are easier to remember, but computers can only use IP addresses to communicate
- DNS is an [[id:89296f19-c817-43a7-8ef6-013e697d32ab][Application Layer]] protocol which allows computers to find the IP address associated with a host name
- These calls are made by browser when attempting to visit a [[id:d81d3738-a08e-498a-ae6b-1118a0341de1][Website]]
- Can lookup using nslookup or dig
  - nslookup <domain>
  - dig <type?> <domain> <"+short"?>
- DNS uses [[id:be4e6279-b595-4fcf-befc-06d57273d988][UDP]] for speed
  - UDP is unreliabale but DNS does not need reliability
  - Locally served DNS has lower chance of packet loss
  - Browsers can send multiple identical DNS requests
** DNS Servers
:PROPERTIES:
:ID:       021e6dab-9bc6-4432-bddb-6010e378a3bd
:END:
- DNS servers exist in a hierarchy
  - Root server on top
  - TLD servers next
  - Then authoritative domain servers
  - ...
** Local [[id:021e6dab-9bc6-4432-bddb-6010e378a3bd][DNS Servers]]
:PROPERTIES:
:ID:       755c25c6-acc8-4bb8-80ef-2495f0919ade
:END:
- A DNS Server hosted within a LAN, such as your workplace, your ISP, your school, your house
- The Local DNS Server is "Non-authoritative"
- Querys and records are [[id:7a342c16-c2cd-4098-9326-17e0e9654c0b][Cached]] locally to speed up request fufillment
** DNS Cacheing
:PROPERTIES:
:ID:       7a342c16-c2cd-4098-9326-17e0e9654c0b
:END:
- Records are saved locally as a cache to speed up repeated [[id:a3ae3cdc-5328-402e-8c47-177e942fa4fb][DNS]] requests
- Life is based on the TTL property of a DNS record
** Resource Records
:PROPERTIES:
:ID:       46f135e4-e2fa-422f-a038-677b08ddcda0
:END:
- Format of DNS records
- Maps between host and IP address
- (name, value, type, ttl)
  - Name is the hostname, i.e. www.example.com
  - Value is the value mapped to the hostname, i.e. 93.184.216.34
  - [[id:1cb6721f-2c5a-40a0-a447-58e3bc3aea04][Type]]: the type of entry
  - TTL: Time to Live ([[id:7a342c16-c2cd-4098-9326-17e0e9654c0b][DNS Cache]] life)
** Record Types
:PROPERTIES:
:ID:       1cb6721f-2c5a-40a0-a447-58e3bc3aea04
:END:
*** A
:PROPERTIES:
:ID:       93b7ce91-aa85-4195-a528-c342661a9aa3
:END:
- "Alias"
- Name is the hostname
- Value is the ip address the name maps to
*** CNAME
:PROPERTIES:
:ID:       5bfc5249-36a9-43f8-83a6-9c185adc2ffa
:END:
- "Canonical name"
- Name is the alias name
- Value is the canonical location that the alias name maps to
- Essentially operates like [[id:93b7ce91-aa85-4195-a528-c342661a9aa3][A]] but value is a hostname
*** NS
:PROPERTIES:
:ID:       6d582497-506c-4e29-9dfc-042e996ecb9a
:END:
- "Name Server"
- Name is the domain
- Value is the name server
- The name server provides the hostname of the canonical nameserver which is in charge of providing values to the [[id:a3ae3cdc-5328-402e-8c47-177e942fa4fb][DNS]]
*** MX
:PROPERTIES:
:ID:       bae007b2-3ece-432c-bb20-abc5283f589f
:END:
- "Mail Exchanger"
- Name is the domain
- Value is the mail server
* Addressing
:PROPERTIES:
:ID:       4201faab-cb57-4a69-992a-fd9328ac0dd4
:END:
- [[id:11fd492e-05ef-4acd-818c-60fdcc28ae46][IP Addresses]] are used to identify hosts
- This is not however, because many different applications might be running on the host
- Applications are identified by using a port number (16 bits)
  - Ports 1-1023 are reserved
- Example Ports:
  - 80: HTTP server
  - 25: SMTP server
* Socket
:PROPERTIES:
:ID:       b9e8bfd8-a7b3-4e36-806f-f58eeebc3283
:END:
- Sockets are an interface that sit between the [[id:89296f19-c817-43a7-8ef6-013e697d32ab][Application Layer]] and [[id:dff0f2f7-2b30-48bd-8fb5-220db2076834][Transport Layer]]
- Applications treat the internet like a black box, and communicate only using the socket
- [[id:be4e6279-b595-4fcf-befc-06d57273d988][UDP]]:
  - Socket has no connection, packets are all sent as they are to the server and port
  - [[file:media/udp-diagram_1.png][UDP Diagram]]
- [[id:458a323f-763b-458e-9ce8-7b7fb008a473][TCP]]:
  - A connection must first be established
  - Server creates a socket for each client
  - [[file:media/tcp-diagram_1.png][TCP Diagram]]
  - Note: In the [[id:1F24CF84-A241-4317-AC6D-C4C4683F34DF][Exam]], make sure to count a +1 for the welcome socket
* Bytes vs Bits
:PROPERTIES:
:ID:       143f2320-d086-44d1-bcd3-41332fde6116
:END:
- If the b is lowercase (b, Kb, Mb, ...), then it refers to bits
- If the B is uppercase (B, KB, MB), then it refers to bytes
* Topology
:PROPERTIES:
:ID:       f7c55006-b0a3-4842-b668-0be675ac1aab
:END:
- Minimal:
  - Tree topology
    - Organized in a tree
  - Chain topology
    - Special case of tree topology where every node has at most one child
  - Star topology
    - Special case of tree topology where one node has all the children
- Maximal:
  - Mesh
    - Fully connected
* Reliable Data Transfer
:PROPERTIES:
:ID:       074a6a63-d7ce-4112-972f-58fa072d2a0e
:ROAM_ALIASES: RDT
:END:
- "Sending data reliably over the internet is hard"
- Question: how do we build a reliable [[id:dff0f2f7-2b30-48bd-8fb5-220db2076834][Transport Layer]] protocol on top of an unreliable [[id:5d0b0590-fd98-4db1-89f1-f8f38bd11bb7][Network Layer]]?
- The network may:
  - Corrupt packets
  - Drop packets
  - Reorder packets
  - Deliver packets after an arbitrary delay
- Our reliable transport service should:
  - Guarantee packet delivery and correctness
  - Deliver packets in the same order that they are sent
- [[file:media/rdt-protocol_1.png][RDT Protocol]]
* Toy [[id:074a6a63-d7ce-4112-972f-58fa072d2a0e][RDTs]]
:PROPERTIES:
:ID:       111511f6-3caf-4fd8-848e-414646b24187
:END:
- [[file:media/toy-rdt_1.png][Chart]]
** Toy RDT 1.0
- Assume that the channel is 100% reliable
- We just have to simply send the packets as is
- We get this [[id:6ec79c40-1a4a-4f24-b947-dc6cb3611532][FSM]]:
- [[file:media/toy-rdt-1.0_1.png][Example]]
** Toy RDT 2.0
 - Assume that the channel may flip bits
 - Other than that, the channel is 100% reliable
 - We can detect errors with a checksum
 - Use ACK (acknowledge) and NAK (negative acknowledge) on the receiver side to tell the sender whether or not the packet was ok
 - This is a [[id:f4930941-2e92-4fff-a7b3-4ee7f8583e60][Send-and-Wait Protocol]]
 - [[file:media/toy-rdt-2.0_1.png][Demo]]
 - We get this [[id:6ec79c40-1a4a-4f24-b947-dc6cb3611532][FSM]]:
 - [[file:media/toy-rdt-2.0_2.png][Example]]
 - Flaw: what happens when the ACK or NAK is corrupted?
   - Can the sender just resend the packet if it receives garbled feedback?
** Toy RDT 2.1 (2.0 w/ Packet Sequence #)
- Include the sequence number to each packet
- Receiver can discard packets that have already been received
- [[file:media/toy-rdt-2.1_1.png][Demo 1]]
- [[file:media/toy-rdt-2.1_2.png][Demo 2]]
- We get this [[id:6ec79c40-1a4a-4f24-b947-dc6cb3611532][FSM]]:
- [[file:media/toy-rdt-2.1_3.png][Example Sender]]
- [[file:media/toy-rdt-2.1_4.png][Example Receiver]]
** Toy RDT 2.2 (2.1 w/out NAK)
- Instead of sending NAK for corrupted packets, instead send ACK for the previous correct packet
- [[file:media/toy-rdt-2.2_1.png][Demo]]
** Toy RDT 3.0
- Assume that the channel may flip bits, lose packets, and may have arbitrarily long delay
- Will not reorder packets
- How do we detect packet loss, since the delay can be arbitrary?
- Set a reasonable timeout value to trigger an assumption that the packet is lost, so the sender will resend if an ACK is not received in time
- If the packet is delayed and timeout is triggered, this means that a duplicate will have been sent.
- [[file:media/toy-rdt-3.0_1.png][Demo 1]]
- [[file:media/toy-rdt-3.0_2.png][Demo 2]]
- We get this [[id:6ec79c40-1a4a-4f24-b947-dc6cb3611532][FSM]]:
- [[file:media/toy-rdt-3.0_3.png][Example Sender]]
- Receiver is about the same as Toy RDT 2.1
-

* Finite State Machines
:PROPERTIES:
:ID:       6ec79c40-1a4a-4f24-b947-dc6cb3611532
:ROAM_ALIASES: FSM
:END:
- A finite state machine is defined by a finite set of states and a set of transitions between states
- [[file:media/example-fsm_1.png][Example]]

* Send-and-Wait Protocol
:PROPERTIES:
:ID:       f4930941-2e92-4fff-a7b3-4ee7f8583e60
:END:
- This is a protocol which requires senders to wait for a response after each packet is sent.
