:PROPERTIES:
:ID:       D0F12033-8149-4A0A-AD04-1B0754314ADC
:END:
#+TITLE: CS2107 Notes
#+filetags: :CS2107:

- links :: [[id:3B2DB3CE-7EDA-4289-B06B-8882D7749848][CS2107]]
  
* Cybersecurity
:PROPERTIES:
:ID:       EB9F00D0-CAC6-4873-985D-AC4BF9F01C09
:END:

- What does security really mean?
  - "A [[id:47B9EEDF-4983-47BE-B8E9-251798139859][threat]] is blocked by [[id:16BCFF2F-F89F-4D2F-B629-EC2E2EBA78D9][control]] of a [[id:C0052FB7-4CF6-4487-BDB5-7FA738E64422][vulnerability]]"

* Components of [[id:EB9F00D0-CAC6-4873-985D-AC4BF9F01C09][Cybersecurity]]
:PROPERTIES:
:ID:       B4C9EFC3-3CAE-4D3F-A141-4798C490B3DF
:END:
** Assets
:PROPERTIES:
:ID:       2FC2E041-1497-4A1B-87FE-D2A28737F6C2
:END:
- Objects of value
  - Hardware
  - Software
  - Data and information
  - Reputation

** Threats
:PROPERTIES:
:ID:       47B9EEDF-4983-47BE-B8E9-251798139859
:END:
- Set of circumstances with the potential to cause loss or harm

** Vulnerability
:PROPERTIES:
:ID:       C0052FB7-4CF6-4487-BDB5-7FA738E64422
:END:
- Weaknesses in a system

** Control
:PROPERTIES:
:ID:       16BCFF2F-F89F-4D2F-B629-EC2E2EBA78D9
:END:
- A method of countering threats

* Why is security hard?
:PROPERTIES:
:ID:       21dce284-1d50-4427-8140-c353334f4b64
:END:
- Why can't we blame the developers?
  - Many developers lack the adversarial thinking to address potential problems during the development stage.

* CIA
:PROPERTIES:
:ID:       B165C62D-4F62-4818-A7AC-391B65877BC5
:END:

- Requrirements for [[id:EB9F00D0-CAC6-4873-985D-AC4BF9F01C09][security]].
** Confidentiality
:PROPERTIES:
:ID:       42696A4B-0DFA-435B-858E-D061FEB2CCA0
:END:
- [[id:99FB3BDD-CFF6-42FF-AC75-1A8DB3CEE9B4][Privacy]], anonymity
- Covert channel
- Plausible deniability

** Integrity
:PROPERTIES:
:ID:       1FE1E862-1BEC-409A-93BB-7CBF73FACB14
:END:
- Process integrity
- Authenticity
  - Validate message sender/origin
- Non-repudiation
  - Digital signature

** Availability
:PROPERTIES:
:ID:       932259C5-7559-4B50-9133-5B00E0002256
:END:
- Information is accessible to the intended people

** Authenticity
:PROPERTIES:
:ID:       ba3c205b-306c-4bb8-9803-5e0c9c1460f6
:END:
- Knowing and verifying who a message is from
* Tradeoffs
- Ease of use
- Performance
- Cost
- Security, functionality, usability triangle

* Privacy
:PROPERTIES:
:ID:       99FB3BDD-CFF6-42FF-AC75-1A8DB3CEE9B4
:END:

- A.K.A. PII

* Cryptosystems
:PROPERTIES:
:ID:       03871803-1117-479D-90D9-90A648B192EF
:END:
- The general flow has plaintext to cyphertext back to plaintext.
  - When evaluating the system, we assume that the cyphertext is known to any attackers
    - In general, we assume that the attacker can read all data sent accross the communication channel
  - Requirements:
    - Correctness
      - For any given plaintext, applying the encryption and decryption will result in the original plaintext
    - Security
      - An attacker will not be able to figure out the plaintext.
    - Performance
      - The encryption and decryption steps must be sufficently fast, and use sufficiently small keys and cyphertexts.
      
** Symmetric vs Asymmetric Cryptosystems

*** Symmetric Cryptosystem
:PROPERTIES:
:ID:       7765D5BC-0C92-4AC3-BFA6-822A5517070A
:END:
- The same [[id:DE8B7A61-3F92-4079-8F99-035A82B5CFF6][key]] is used for encryption and decryption of plaintext data.

*** Asymmetric Cryptosystem
:PROPERTIES:
:ID:       7A154837-3682-4C60-BC05-A284FC06290E
:END:
- Different [[id:DE8B7A61-3F92-4079-8F99-035A82B5CFF6][keys]] are used for encryption and decryption of plaintext data.

* Cryptology
:PROPERTIES:
:ID:       4AB2DE71-90AE-47A8-85E2-23C7361DAF21
:END:

- [[id:287CF85B-BF15-47AE-9C6C-B203F1FDF3DE][Cryptography]] + [[id:18A7FDEC-431B-4D8C-A0C2-93831A0A2F5B][Cryptanalysis]]

** Cryptography
:PROPERTIES:
:ID:       287CF85B-BF15-47AE-9C6C-B203F1FDF3DE
:END:
- The act of creating cyrptosystems

** Cryptanalysis
:PROPERTIES:
:ID:       18A7FDEC-431B-4D8C-A0C2-93831A0A2F5B
:END:
- The act of studying and breaking cryptosystems

* Characters
:PROPERTIES:
:ID:       C4D031D7-4879-4D41-A60F-21234529EB2C
:END:
- Recurring characters in stories about [[id:03871803-1117-479D-90D9-90A648B192EF][Cryptosystems]]
** Alice
:PROPERTIES:
:ID:       FA0748AA-F706-4A4B-8369-917B8928E52B
:END:
- Usually the sender of a message.
** Bob
:PROPERTIES:
:ID:       C0FD5E9B-B0B4-4547-B38A-725D46A09C0E
:END:
- Usually the recipient of a message.
** Eve
:PROPERTIES:
:ID:       28DAED70-FF28-43A9-AABE-A1FC13D0A639
:END:
- An "evesdropper", who passively reads the communication channel.
** Mallory
:PROPERTIES:
:ID:       C6BD6271-3B92-4538-9398-FCCA53B7A1B5
:END:
- A "malicious actor", who actively reads and edits the communication channel.

* Key
:PROPERTIES:
:ID:       DE8B7A61-3F92-4079-8F99-035A82B5CFF6
:END:

- A set of data used in encryption and/or decryption of data within a [[id:03871803-1117-479D-90D9-90A648B192EF][Cryptosystem]].

* Key Space
:PROPERTIES:
:ID:       0FD182B5-6597-4D82-A45D-9F5A2F32E5A6
:END:
- The set of all possible [[id:DE8B7A61-3F92-4079-8F99-035A82B5CFF6][keys]] for a particular [[id:605D780C-F8CA-4C2A-A008-1D2019935535][cipher]].

* Key Size
:PROPERTIES:
:ID:       099f0004-fd96-43ee-b583-24f2528d6893
:END:
- The number of bits needed to represent the [[id:DE8B7A61-3F92-4079-8F99-035A82B5CFF6][Keys]] of the [[id:0FD182B5-6597-4D82-A45D-9F5A2F32E5A6][Key Space]]
** Proving Key Size is Correct
:PROPERTIES:
:ID:       c1f5bc20-33c0-4e0b-8410-204b4f3efb7e
:END:
- Method: index pairs table
  - Essentially prove that for every value representable using N bits, mapping it to one [[id:DE8B7A61-3F92-4079-8F99-035A82B5CFF6][Key]] will cover the [[id:0FD182B5-6597-4D82-A45D-9F5A2F32E5A6][Key Space]] by using all possible N bits
  - AKA are there at least as many values represented by N bits as there are possible keys?

* Ciphers
:PROPERTIES:
:ID:       605D780C-F8CA-4C2A-A008-1D2019935535
:END:

- A scheme for encrypting plaintext

* Attacking a Cipher
:PROPERTIES:
:ID:       51F8780E-D175-4194-9C9B-803B07FB500B
:END:
- An attacker's goal is generally to find the key, in order to determine the plaintext
- It could also be simply to figure out some limited information about the plaintext.
- Generally, to commence an attack, an attacker would know some information about the [[id:605D780C-F8CA-4C2A-A008-1D2019935535][Cipher]]

** Known Plaintext
:PROPERTIES:
:ID:       51C901FF-09EA-40C6-AE8E-107F33D1D66D
:END:
- Some pairs of plaintext and its corresponding cyphertexts.
  - In many cases the attacker can guess at what the plaintext is depending on the context of the data (email headers, HTML headers, common words, etc.)
  - If a cipher can be broken when we have this information, we call it "insecure under known-plaintext attack" or "broken under known-plaintext attack".

** Ciphertext Only
:PROPERTIES:
:ID:       50B37D8A-18F7-49B5-B0D5-917D42BA7F02
:END:
- A large number of cyphertext all using the same key.
  - In some cases, especially with human languages, many substrings have much higher frequency in usage.
  - If a cipher can be broken when we have this information, we call it "not secure under cyphertext-only attack".

* Simple Ciphers
:PROPERTIES:
:ID:       0937F10B-AF62-460A-BCB9-CBB65A3AFB5E
:END:
- Simple [[id:605D780C-F8CA-4C2A-A008-1D2019935535][Ciphers]] are schemes used for studying basic cryptology.

** Substitution Cipher
:PROPERTIES:
:ID:       A7E04A38-A085-4646-B01F-94D9EAFA157F
:END:
- Each character is mapped to another character.
- [[id:0FD182B5-6597-4D82-A45D-9F5A2F32E5A6][Key Space]]
  - All possible permutations of the alphabet
  - AKA all possible bijections between the set of characters and itself.
- [[id:099f0004-fd96-43ee-b583-24f2528d6893][Key Size]]
  - Each key is a permutation of the 27 letters in the alphabet
  - Naive method: 1 byte per letter = 8 * 27 = 216
  - Smarter method: 5 bits per letter = 5 * 27 = 135
  - Theoretical lower bound: \(\log_2(27!) \approx 94\)
    - \(2^{94} = 1.9E28\)
    - \(27! = 1.0E28\)
- Not secure under [[id:51C901FF-09EA-40C6-AE8E-107F33D1D66D][Known Plaintext]] or under [[id:50B37D8A-18F7-49B5-B0D5-917D42BA7F02][Ciphertext Only]] attacks.
** Permutation Cipher
:PROPERTIES:
:ID:       cd202af0-25ca-4c9d-a11a-ddc63ca59014
:ROAM_ALIASES: "Transposition Cipher"
:END:
- A key uses a key length t and a list of numbers representing a permutation of the numbers from 1 to t.
- For each group of t characters, permutate the characters as given by the list
- Not secure under [[id:51C901FF-09EA-40C6-AE8E-107F33D1D66D][Known Plaintext]]
  - Given the plaintext you can easily figure out the key length, and then the list of permutation itself very trivially
- Not secure under [[id:50B37D8A-18F7-49B5-B0D5-917D42BA7F02][Cyphertext Only]]
  - If the text is known to be some language, then words and phrases can be guessed at
** One Time Pad
:PROPERTIES:
:ID:       cc5982a8-8c3e-453c-9393-fa278a1c8f8e
:END:
- Utilizes the [[id:11af3871-9e7c-4b46-92f5-8ee8acd06481][XOR]] operation
- Needs a n-bit key for a n-bit plaintext
- XOR the plaintext with the key
- Decrypt by XOR the ciphertext with the key
- Key must be random and used only once
- Under [[id:51C901FF-09EA-40C6-AE8E-107F33D1D66D][Known Plaintext]], the key can be found but it will not be used any more
- Impossible to find the key under [[id:50B37D8A-18F7-49B5-B0D5-917D42BA7F02][Ciphertext Only]]
  - Any n-bit plaintext can result in a specific n-bit ciphertext given the correct key
- "Unbreakable"/"[[id:0864648d-4915-4973-9b93-0f513ee5e5d6][Perfect Secrecy]]" given unlimited computing power and time, as long as the key is not reused
- No information about the plaintext can be gained given a ciphertext
  - Except the length, but can also be mitigated if messages are all padded out
- Weaknesses
  - Length of the key = length of the plaintext, so becomes hard to use in many applications (like without a machine)
  - [[https://www.nsa.gov/portals/75/documents/about/cryptologic-heritage/historical-figures-publications/publications/coldwar/venona_story.pdf][The Veona Story]]: Broken OTP due to repeated key
- Usage: [[https://ciphermachines.com/onetimepad.html][Cipher Machines]]
* XOR
:PROPERTIES:
:ID:       11af3871-9e7c-4b46-92f5-8ee8acd06481
:END:
- "Are the bits different" operation
- Associative operation
- Applying it twice to one bit string with the same other bit string results in the original one.
- Applying it to itself becomes 0
* Perfect Secrecy
:PROPERTIES:
:ID:       0864648d-4915-4973-9b93-0f513ee5e5d6
:END:
- \(Pr(X = x | Y = y) = Pr(X = x)\) given any distribution X, for all x and y
- "The probability that the plaintext is any given value is equal to the probability that the plaintext is that value given the ciphertext"
- "No knowledge is gained by knowing the ciphertext"

* Security Models
:PROPERTIES:
:ID:       b30c808d-acea-428a-9564-6fb356072eb6
:ROAM_ALIASES: "Attack Models"
:END:
- Security achieved by an encryption is formulating by stating the class of attacks that it prevents
- Attack described by:
  - Attacker's goal
  - Attacker's capability
- Attack models are application-dependant
** Encryption Security Models
:PROPERTIES:
:ID:       626045a3-13e4-43d8-8b2d-724b0e40fb6d
:END:
- Capabilities
  - [[id:50B37D8A-18F7-49B5-B0D5-917D42BA7F02][Ciphertext Only]]
  - [[id:51C901FF-09EA-40C6-AE8E-107F33D1D66D][Known Plaintext]]
  - Chosen Plaintext
    - Attacker can get the ciphertext for arbitrary plaintexts through use of some black box (usually contacting the server) "The Encryption Oracle"
    - In a public key scheme, the encyrption oracle is always available
  - Chosen Ciphertext
    - Attacker can get the plaintext for arbitrary ciphertexts through use of some black box "The Decryption Oracle"
  - In these attacks the attacker can "adapt", meaning give different inputs to the oracle based on the previous outputs
- Goals
  - Total break
    - Find the encryption key
  - Partial break
    - Find the plaintext of a cipher
    - Find some information about the plaintext
* Comparing Models
:PROPERTIES:
:ID:       2cff7ab5-1b5f-4195-bf3c-3f576551a604
:END:
- If under an attack model a system \(S_1\) prevents more attacks than \(S_2\), then \(S_2\) is more secure than \(S_1\), specifically *with respect to the [[id:b30c808d-acea-428a-9564-6fb356072eb6][Attack Model]]*
- The goal is to prevent attacks under the strongest capability and the weakest goals
- Modern ciphers aim for [[id:0864648d-4915-4973-9b93-0f513ee5e5d6][Perfect Secrecy]] under Chosen Plaintext ([[id:626045a3-13e4-43d8-8b2d-724b0e40fb6d][Encryption Security Models]])
* Block Ciphers
:PROPERTIES:
:ID:       4a483da5-7655-4fe5-b67b-d724b2ee1d8d
:END:
- [[id:605D780C-F8CA-4C2A-A008-1D2019935535][Ciphers]] which operate on blocks of data at a time
- Use an [[id:52f7f8f6-2a6c-4286-866c-1d9e337237ec][IV]] to make keys non-deterministic
- Properties:
  - Has a block size: number of bits in a plaintext (n)
  - Has a keys size: number of bits in a key size (s)
- Examples:
  - DES n=64bits, s=56bits
    - Became searchable as computing power increased
  - 3DES n=64bits, s=168bits (is literally just 3 applications of DES)
  - AES n=128bits, s=128, 192, 256bits
    - Selected by NIST among many other proposals
    - "Rijndael", proposed by Belgian researchers Daemen and Rijmen
    - Still in use today
- Longer key = more secure, slower
- Techniques:
  - Substitution-permutation network (AES)
  - Feistel scheme (DES)
* Stream Ciphers
:PROPERTIES:
:ID:       82e3a5fd-e575-4bdd-8e78-90b18b84b031
:END:
- [[id:605D780C-F8CA-4C2A-A008-1D2019935535][Ciphers]] which operate on a stream of data (such as [[id:cc5982a8-8c3e-453c-9393-fa278a1c8f8e][One time Pad]])
- Good for streaming data which needs low latency
- May be known as "pseudo/simulated OTP"
  - Generates a one time pad key using a much smaller key, using a [[id:287CF85B-BF15-47AE-9C6C-B203F1FDF3DE][Cryptographically]] secure pseudorandom process
  - Weaness: generation is deterministic
    - This means that the same key will be generated every time
    - If given two ciphertexts using the same key, by XORing them together you get the XOR of the two plaintexts
    - Depending on the structure of the data information will be leaked
  - Solution: use an [[id:52f7f8f6-2a6c-4286-866c-1d9e337237ec][IV]]
* IVs
:PROPERTIES:
:ID:       52f7f8f6-2a6c-4286-866c-1d9e337237ec
:END:
 - Generate data by using an IV (Initialization Vector)
 - IV must be different for each plaintext
 - IV must be shared between both sender and recipient such that the same keystream can be generated
 - IV is in the clear (may or may not be considered part of the ciphertext depending on who you ask)
* Stream Ciphers vs Block Ciphers
:PROPERTIES:
:ID:       2539627c-eb3f-4ca4-bfb2-08bc3f82fccd
:END:
- [[id:82e3a5fd-e575-4bdd-8e78-90b18b84b031][Stream Ciphers]]
  - Pros
    - Speed of transformation
    - Low error propagation
  - Cons
    - Low [[id:efc76398-34e2-4e48-aaa6-df034c082796][Diffusion]]
    - Susceptibility to malicious modification
- [[id:4a483da5-7655-4fe5-b67b-d724b2ee1d8d][Block Ciphers]]
  - Pros
    - High [[id:efc76398-34e2-4e48-aaa6-df034c082796][Diffusion]]
    - Immunity to insertion of data
  - Cons
    - Slow
    - Padding
    - Errors affect larger amounts of data
* Diffusion
:PROPERTIES:
:ID:       efc76398-34e2-4e48-aaa6-df034c082796
:END:
- A change in the plaintext causes many changes in the ciphertext
- A part of the ciphertext depends on many parts of the plaintext
- Means that attackers need a large amount of ciphertext to infer the encryption algorithm
* Confusion
:PROPERTIES:
:ID:       1f2fd325-589c-442d-96be-eeba13e18217
:END:
- Attacker should not be able to predict the output of the encryption when a single character of the plaintext or the key is changed

* Exhaustive Search
:PROPERTIES:
:ID:       13695deb-3d7e-40cc-8625-59c18476e61f
:END:
- All ciphers are vulnerable to exhaustive search (except OTP)
- If the key length is 56 bits, there are \(2^{56}\) possible keys
- The time for an exhaustive search is thus:
  - \(2^{56}\) worst case
  - \(2^{55}\) average
- Schemes can be stronger w.r.t exhaustive search based on how many keys must be searched to break the cipher
- Some schemes have more efficient search schemes
  - For example, in 2048-bit RSA, only about \(2^{112}\) searches are required
  - Thus we can say that 2048-bit RSA has the key strength of 112 bits

* Modes-of-Operation
:PROPERTIES:
:ID:       01929c27-22c2-45b8-a539-47b2a9e6d39b
:END:
- Answers the question: "how do we encyrpt an arbitrarily long plaintext using a [[id:4a483da5-7655-4fe5-b67b-d724b2ee1d8d][Block Cipher]]?"
- Extends the encryption from single to multiple blocks, securely
** Electronic Codebook Mode
:PROPERTIES:
:ID:       c407cc60-cb13-401d-b3b1-0dbb8df36fa6
:ROAM_ALIASES: "ECB Mode"
:END:
- Split the plaintext into blocks, apply the block cipher to each block with the *same key*
- Insecure (leaks information about the plaintext)
  - When two blocks contain the same data, their output ciphertext will be the same.
    - This is an issue, for example, when encrypting an image which has consistant colors, since many blocks may be repeated.
    - This issue arises because AES is deterministic.
    - If we use a random [[id:52f7f8f6-2a6c-4286-866c-1d9e337237ec][IV]] instead, the algorithm becomes probabilistic
    - This leads to possible solutsions such as including a random IV with each block
      - This is secure but leads to large sizes (~ double the size of the plaintext)
** Cipher Block Chaining Mode
:PROPERTIES:
:ID:       cecab1ed-7de2-4e50-98a1-2b98d0f543a5
:ROAM_ALIASES: "CBC Mode"
:END:
- Building off the technique in [[id:c407cc60-cb13-401d-b3b1-0dbb8df36fa6][ECB Mode]]
- Start with a single [[id:52f7f8f6-2a6c-4286-866c-1d9e337237ec][IV]], to be used only on the first block
- For subsequent blocks, the IV is equal to the output ciphertext of the previous block
- [[file:media/cbc_1.png][CBC]]
- Issues
  - If one block gets corrupted the rest are also corrupted
  - No parallelization
** Counter Mode
:PROPERTIES:
:ID:       5a35c2ef-ea90-48f0-911d-17014d43a05f
:ROAM_ALIASES: "CTR Mode"
:END:
- Uses a [[id:4a483da5-7655-4fe5-b67b-d724b2ee1d8d][Block Cipher]], but acts closer to a [[id:82e3a5fd-e575-4bdd-8e78-90b18b84b031][Stream Cipher]]
- Start with single [[id:52f7f8f6-2a6c-4286-866c-1d9e337237ec][IV]]
- Increment it for each block
- Apply the blcok cipher to the IV
- [[id:11af3871-9e7c-4b46-92f5-8ee8acd06481][XOR]] the IV with the plaintext to get the ciphertext
- Essentially the application of the block cipher to a sequence of increasing IVs will generate an acceptably random keystream
- [[file:media/ctr_1.png][CTR]]
* Meet-in-the-Middle Attack
:PROPERTIES:
:ID:       f9d73516-fc1c-4f71-9de4-8098c4f7e160
:END:
 [[id:0826056f-f8ab-48d8-b4a3-4d62b40119a4][2DES]] key length is 2 * 56 bits = 112 bits
- But, is the strength really equivalent to 112 bits?
- Meet-in-the-Middle is a [[id:51C901FF-09EA-40C6-AE8E-107F33D1D66D][Known Plaintext]] attack
- The problem: Given c and m, find the two keys used for 2DES encryption
  - From the plaintext m, run encryption for all possible keys \(k_1\)
  - Similarly, from the ciphertext c, run decryption for all possible keys \(k_2\)
  - If a value occurs as the output of the encryption of m and as the output of the decryption of c, then the keys used in that pair is the key set used
  - This reduces the [[id:13695deb-3d7e-40cc-8625-59c18476e61f][Exhaustive Search]] timing from \(2^{112}\) to \(2^{57}\)
    - In general, the search time for applying this attack will be just \(2^{k + 1}\) assuming the encyrption is applied twice.
* 2DES
:PROPERTIES:
:ID:       0826056f-f8ab-48d8-b4a3-4d62b40119a4
:END:
- [[id:4a483da5-7655-4fe5-b67b-d724b2ee1d8d][DES]] is not secure w.r.t. today's computing power
- Apply it twice or more to increase key space
- 2DES applies DES twice

* 3DES
:PROPERTIES:
:ID:       9d765281-0e63-4521-9aa8-f39ae9589e00
:END:
- [[https://en.wikipedia.org/wiki/Triple_DES][3DES wikipedia]]
  - Different keying options
- Used before AES was fully developed
- No efficient attacks currently, but is inefficient to use compared to AES.
* Padding Oracle Attack
:PROPERTIES:
:ID:       0920a4ca-e492-441e-85d7-b6d7805782c3
:END:
- Capabilities:
  - A ciphertext and [[id:52f7f8f6-2a6c-4286-866c-1d9e337237ec][IV]] ([[id:50B37D8A-18F7-49B5-B0D5-917D42BA7F02][Ciphertext Only]])
  - Access to the padding oracle
    - Accepts a ciphertext, and will tell the attacker if it is in the correct [[id:fe0cb2f0-461c-4f1a-befc-4d83585b0a8b][Padding]] format
  - No knowledge of the padding oracle's secret key
- Goal:
  - Find the plaintext
- [[id:cecab1ed-7de2-4e50-98a1-2b98d0f543a5][CBC Mode]] is vulnerable to this attack, specifically using [[id:1bbca30f-1ab3-42b7-8b58-c6a47168d989][PKCS #7]]
  - By changing the IV to a new value IV', we can modify the padding at the end
  - Assume there are 3 bytes of padding. We know the last bytes of the plaintext are 3, 3, 3.
  - Set IV' such tht the last bytes are 4, 4, 4, 4. This is easy to derive for the last 3, and we use the oracle to find the correct value for the fourth-to-last
  - [[file:media/padding-oracle_1.png][Padding Oracle]]
  - After we find the correct IV', the corresponding plaintext tells us the original plaintext
  - [[file:media/padding-oracle_2.png][Padding Oracle Derive Value]]
  - Conceptually:
    - We have a bit array M, which when [[id:11af3871-9e7c-4b46-92f5-8ee8acd06481][XOR]]'d with the original IV or a block of ciphertext
    - M will effectively be XOR'd with the first block (or next block, if you are attacking by modifying the ciphertext) of the original plaintext during decryption to produce a modified plaintext x'.
    - We set M such that we can figure out the last bits of x' by virtue of it being a valid PKCS #7 padded value
    - From that, we can know the original plaintext x since we know x' XOR M = x.

* Padding
:PROPERTIES:
:ID:       fe0cb2f0-461c-4f1a-befc-4d83585b0a8b
:END:
** PKCS #7
:PROPERTIES:
:ID:       1bbca30f-1ab3-42b7-8b58-c6a47168d989
:ROAM_REFS: https://en.wikipedia.org/wiki/PKCS_7
:END:
- If the block size is \(n\) bytes, but the last block only has \(m\) values, then we need \(p=n-m\) padding bytes
- Each padding byte will be set to \(p\)

* [[id:287CF85B-BF15-47AE-9C6C-B203F1FDF3DE][Cryptography]] Pitfalls
:PROPERTIES:
:ID:       2bebee28-37df-40f1-a7fd-f957cdffdb79
:END:
- Secure ciphers may be vulnerable if not implemented or adopted properly
  - Don't reuse IV
    - For example, IV derived from filename, but many files may share the same name ([[https://www.schneier.com/blog/archives/2005/01/microsoft_rc4_f.html][Microsoft]])
  - Wrong IV choice
    - IV choice should be psuedorandom, if choosing 1, 2, 3, 4, ... then it is vulnerable ([[https://resources.infosecinstitute.com/ssl-attacks/][BEAST]])
  - Reusing OTP
    - [[https://www.nsa.gov/portals/75/documents/about/cryptologic-heritage/historical-figures-publications/publications/coldwar/venona_story.pdf][Veona Story]]
  - Secure RNG
    - Random based on time may be predictable
    - Use something like /dev/urandom for unpredictable values
  - DIY
    - Don't roll your own crypto
    - It takes an expert to guarantee the security of a system, don't even think about modifying unless you know what you're doing
      - There are many existing solutions based on your constraints (memory, computation power, speed)
  - Reliance on Obscurity
    - Kerckhoffs' Principle: "A system should be secure even if everything about the system, except the secret key, is a public knowledge" (Encryption engine be stolen by attackers, see the Enigma machines used by Nazis in WWII)
    - It is easier to keep a key secret rather than the whole algorithm
    - It is easier to change a key rather than the whole algorithm
    - Standardized algorithms allow for easier communication
    - Public scrutiny of open algorithms encourage better security
    - Should we have security by obscurity?
      - Examples against:
        - RC4 ([[https://en.wikipedia.org/wiki/RC4][Wikipedia]]) was broken when a description was anonymously posted to a mailing group
        - MIFARE Classic ([[https://en.wikipedia.org/wiki/MIFARE][Wikipedia]]) was found to be using a weak algorithm when reverse engineered
      - Examples for:
        - Username: it isn't secret information but should not be shared anyhow
        - Computer network and storage settings: isn't secret but may give attackers an advantage
        - Program used inside the smart card: isn't secret but makes it easier for attackers to identify vulnerabilities
      - It is ok to use it as only *one* of the many security factors.
  - Using Encryption for authenticity:
    - If you use encryption of authenticity, you run the risk of the attacker brute forcing a valid message if the messages are short enough
* Covert Channel
:PROPERTIES:
:ID:       48fa0dee-27fe-4bf0-9337-d073743c82dd
:END:
- An attack that allows transfer of information between processes which should not be able to communicate.
* Side Channel Attack
:PROPERTIES:
:ID:       2fc854d5-befd-402b-823c-0c57c8deb2aa
:END:
- An attack based on additional information provided by the fundamental design of a protocol
* End-to-End Encryption
:PROPERTIES:
:ID:       304afe4f-6676-41ee-a337-8b126bfbd52a
:END:
- A system of communication in which only the two endpoints are able to read the messages.
* Authentication
:PROPERTIES:
:ID:       4ef52bfb-193b-4fee-8332-33018153a3a3
:END:
- The process of assuring either the communicating entity or the origin of a piece of information is the one that it claims to be
- Authentic: the claimed origin is supported by evidence
- Authenticity imples [[id:1FE1E862-1BEC-409A-93BB-7CBF73FACB14][Integrity]] (a stronger mechanism)
** Entity Authentication
:PROPERTIES:
:ID:       0559e28b-44eb-4dd4-91cc-d343594df65b
:END:
- Connection-oriented communication
- Methods: Password, challenge in response, biometrics
- Examples:
  - A website wants to ensure that the user is actually who they say they are, and the user also needs to know that the website is who they claim to be
** Data-origin Authentication
:PROPERTIES:
:ID:       7ebbff58-f3bc-4b78-9d38-9597b0a0022d
:END:
- Connection-less communication
- Communicating entity is the origin of a piece of information
- Methods: MAC or digital signature
- Examples:
  - Is a set of digital or physical data issued by who the document claims to be from?
* Replay Attack
:PROPERTIES:
:ID:       489649f3-c12b-4a87-a61b-ccf5e9966c1e
:END:
- When an attacker sends a copy of what the genuine user sent previously.
* Password
:PROPERTIES:
:ID:       3f75bf07-bf2b-4f70-819c-938598fd43d2
:END:
- A form of [[id:0559e28b-44eb-4dd4-91cc-d343594df65b][Entity Authentication]]
- Stages
  1. Bootstrapping: user and server agree on a password
     - May be done by users or sysadmin/server
  2. Authentication: the user provides the password for the server to verify
  3. Password reset: the user may need to change the password
- The password is a secret, while the associated id (email, username) is not.
  - However, the id must be unique so that the passwords will never come into conflict event when they are not unique (i.e., every user id, password pair needs to be unique)
- Things to note:
  - Every time the password is in the clear is an opportunity for it to be stolen
    - Requests/authentication can be [[id:489649f3-c12b-4a87-a61b-ccf5e9966c1e][Replay Attack]] by attackers
  - Password can be cracked by brute force
  - Storing password in plaintext is bad practice
  - There are many ways to steal or find the password
  - Default passwords are easy to exploit
    - Case study: Mirai botnet + chinese IoT (default password 888888)
** Password Guessing
:PROPERTIES:
:ID:       470fc6fa-c82c-434c-a3ee-f6cfd6397102
:END:
- Online guessing means actually interacting with the server
- Offline guessing means checking the password against some hash/password file
- Guessing socially relavent things may assist in finding the password faster than brute force
- Can also use [[id:fd64bcf7-edf8-456c-a529-23c62e9ab348][Dictionary Attack]]
** Password Eavesdropping
:PROPERTIES:
:ID:       29799090-763a-471d-a301-0eaa743473e0
:END:
- Shoulder surfing (looking at other people enter passwords)
- Sniffing (listening on the communication channel to find the password)
  - Works over insecure protocols such as HTTP
- Sniffing wireless keyboard data
- Seeing how muscles move over zoom and analysis via AI
- Sound made by keyboard
** Login Spoofing
:PROPERTIES:
:ID:       0a57b29c-2b3d-486f-959b-7b1c3444c2f6
:END:
- Create a mimic login page
- Capture the password, potentially checking it with the real server as well
** Password Cacheing
:PROPERTIES:
:ID:       449271e2-2144-4693-be0c-a43a75662cd3
:END:
- When logging in on a public machine, the password may sometimes be stored for later use
** Insider Attack
:PROPERTIES:
:ID:       0440b23f-2ef6-4489-b46b-6a21c08bf5ca
:END:
- Somehow the attack goes through the system administrator, either willingly by a malicious admin or through another attack
- The password data is leaked through the admin
** Stronger Passwords
:PROPERTIES:
:ID:       c9ae42fe-177d-47d1-88bd-42a5cf1d53bb
:END:
- Use randomly chosen passwords, long, and high [[id:1b1ffa4f-135b-41e8-8584-bc5ee549d316][Entropy]](pair with a password manager)
- Other modifications on combinations of words with symbols may be easier to remember while providing a reasonable level of security
- Systems may implement limited login attempts, password strength checker, and password metering to show the user how strong their password is
- Passwords should be stored as a hash, with salt
** Self-Help Password Reset
:PROPERTIES:
:ID:       fb8c56d7-c7f1-4f76-9806-bf1a53baf6d2
:END:
- Allows users to reset password without too much hassle
- Asking security questions: not the most secure secrets
  - Must be safe, memorable, universal, and consistent
  - If you want to use a site with these, just treat them as backup passwords and generate more, store it somewhere else
- One time password: hinges on the email being only accessible by the authorized entity
  - So if the Email is broken into or the OTP is stolen, then the password protected system is broken as well.
* Keylogging
:PROPERTIES:
:ID:       c7b6cb77-7b67-4c34-b2c4-b1f9b548bd88
:END:
- A method to grab data such as a person's [[id:3f75bf07-bf2b-4f70-819c-938598fd43d2][Password]]
- Either done through physical (between the keyboard and the PC), or software means
* Phishing
:PROPERTIES:
:ID:       a7ab4c55-e8a8-43de-a2f5-75c45709b74d
:END:
- Pretending to be someone else (usually an authority) to make a request that would cause the target to leak some data
- Often done through emails requesting a user to log in to some [[id:0a57b29c-2b3d-486f-959b-7b1c3444c2f6][Spoofed]] system to steal [[id:3f75bf07-bf2b-4f70-819c-938598fd43d2][Passwords]]
- [[https://phishtank.com][PhishTank]] can help prevent phishing attack
- Mail servers should also attempt to filter out these attacks.
** Spear Phishing
:PROPERTIES:
:ID:       31fa104e-58b1-4efe-b762-2f63c48ec6fc
:END:
- A phishing attack hypertargeted at a target audience to increase the effectiveness
* Dictionary Attack
:PROPERTIES:
:ID:       fd64bcf7-edf8-456c-a529-23c62e9ab348
:END:
- Using a subset of brute force possible passwords/keys, such as a list of common passwords to speed up guessing, especially when you have arbitrary targets
* Entropy
:PROPERTIES:
:ID:       1b1ffa4f-135b-41e8-8584-bc5ee549d316
:END:
- Measurement of randomness or unpredictability
- Let a set P contain N unique passwords. If a password is chosen randomly and uniformly from the set P, then the entropy of that password is \(\log_2(N)\) bits
- If the password is not chosen uniformly, then the entropy will be lower.
- [[id:3f75bf07-bf2b-4f70-819c-938598fd43d2][Passwords]] are reccomended to have around 128 bits of entropy to be secure against offline attacks
* ATM Attacks
:PROPERTIES:
:ID:       d77637a1-ebc7-4e2f-847f-60db674617f5
:END:
- Users are authenticated by a card and a pin
- Cards can be stolen or copied
  - An ATM skimmer can also be used to pull data from the card
  - The attacker must also have the PIN, which can be stolen using a camera or a spoofed keypad
* Biometrics
:PROPERTIES:
:ID:       639eec5e-7118-4903-82b3-0446466b3242
:END:
- Utilizes unique-ish physical characteristics of a person for authentication
- During enrollment, a reference is provided to the system
- During verification, a sample is collected then ran through a matching algorithm to compare with the original reference
- Can be used for:
  - Verification (1:1), to confirm that you are who you claim to be
  - Identification (1:n), to figure out who you are among a list of many people
- Matching algorithm cannot be 100% correct
  - Noise during capture
- Types of biometrics
  - Fingerprint
  - Face
  - Iris
  - Retina
  - DNA
  - Palm
- The system assumes the scanner is not compromised
- Systems may employ liveliness checks (for example, body heat), in order to confirm that it is a live sample
** Biometric Matching Algorithm
:PROPERTIES:
:ID:       f35f8daf-5cd3-42ac-805e-941cfa250ba2
:END:
- [[file:media/match-rates_1.png][Match Rates]]
- The algorithm may generate a probability that a sample is a match. The algorithm must set a proper threshold to balance between [[id:34aeb63c-45c2-457e-9b6c-8c4d31765b51][FMR]] and [[id:10edba79-d9d6-41d3-99d7-f485b2c84ca2][FNMR]].
*** False Match Rate
:PROPERTIES:
:ID:       34aeb63c-45c2-457e-9b6c-8c4d31765b51
:ROAM_ALIASES: FMR
:END:
- Number of correct "rejected" responses divided by the total number of "rejected" responses
*** False Non-Match Rate
:PROPERTIES:
:ID:       10edba79-d9d6-41d3-99d7-f485b2c84ca2
:ROAM_ALIASES: FNMR
:END:
- Number of correct "accepted" responses divided by the total number of "accepted" responses
*** Equal Error Rate
:PROPERTIES:
:ID:       3f04870b-8a4e-40b9-a6b9-e1a26bae346c
:END:
- When [[id:10edba79-d9d6-41d3-99d7-f485b2c84ca2][FNMR]] = [[id:34aeb63c-45c2-457e-9b6c-8c4d31765b51][FMR]]
*** Failure-to-enroll Rate
:PROPERTIES:
:ID:       861c4c2b-492a-4332-8046-2a25821806bd
:END:
- Proportion of users who cannot be enrolled (past injury, lacking body parts)
*** Failure-to-capture Rate
:PROPERTIES:
:ID:       fed34721-0969-4387-8526-8bb812874620
:END:
- Proportion of sample capture attempts which fail due to some circumstance (e.x. fingers too wet)
** Fingerprint [[id:639eec5e-7118-4903-82b3-0446466b3242][Biometrics]]
:PROPERTIES:
:ID:       1b877c73-5a45-4f9f-a727-8e0f4edf8a4d
:END:
- Extracts [[id:9ec22be3-4b36-403f-89b2-8675b450974e][Feature Points]] from the sensor, which are called minutiae for fingerprints
- Compares locations of the [[id:9ec22be3-4b36-403f-89b2-8675b450974e][Feature Points]], and generates some match ranking / percentage
** Feature Points
:PROPERTIES:
:ID:       9ec22be3-4b36-403f-89b2-8675b450974e
:END:
- A commonly used method of comparing two samples of biometric data.
* Multi-Factor Authentication
:PROPERTIES:
:ID:       48e45628-7ad0-4356-a10a-1645c53a5e28
:END:
- Also known as n-Factor authentication
- At least 2 different authentication factors, such as:
  - [[id:3f75bf07-bf2b-4f70-819c-938598fd43d2][Password]]
  - [[id:b3c92481-7407-42a7-aeee-015b7db819ce][One Time Password]] (SMS, Email, hardware token)
  - Smart card
  - [[id:a21f098b-91fc-47ca-8c3a-ba67410ff176][SSO]]
  - [[id:639eec5e-7118-4903-82b3-0446466b3242][Biometrics]]
* One Time Password
:PROPERTIES:
:ID:       b3c92481-7407-42a7-aeee-015b7db819ce
:END:
- Also refered to as OTP, not to be confused with [[id:cc5982a8-8c3e-453c-9393-fa278a1c8f8e][One Time Pad]]
- A value sent to you via email, SMS, or even mail which is used to authenticate you
- OTP via SMS is now depreciated, because:
  - SMS is stored in plaintext
  - May be intercepted in flight
  - May be intercepted on the phone (malware)
  - However, it is still better than single-factor authentication
* Single Sign-On
:PROPERTIES:
:ID:       a21f098b-91fc-47ca-8c3a-ba67410ff176
:ROAM_ALIASES: SSO
:END:
- A system which uses a different service (e.x. Google or Facebook) to confirm someone's identity
* Public Key Encryption
:PROPERTIES:
:ID:       ba7c1150-8c97-4862-87db-edf38efaa278
:ROAM_ALIASES: PKC PKE
:END:
- [[id:287CF85B-BF15-47AE-9C6C-B203F1FDF3DE][Cryptography]]([[id:7A154837-3682-4C60-BC05-A284FC06290E][Asymmetric Cryptosystem]]) scheme which has a public key which is known to everybody, and a private key only known by those who can decrypt the ciphertext.
- Allows anyone to encrypt data for a person to decrypt
- [[id:b30c808d-acea-428a-9564-6fb356072eb6][Security Models]]:
  - Security requirement: public key and ciphertext is known, but not the private key
  - Implies: the private key should not be easy/practically impossible to derive from the public key
- Why PKE?
  - Suppose we have n people who want to communicate with each other
  - With pairwise [[id:7765D5BC-0C92-4AC3-BFA6-822A5517070A][Symmetric Cryptosystem]] schemes, we need \(\frac{(n)(n-1)}{2}\) keys total
  - With a single broadcast channel using PKE, we only need \(n\) keys.
- Popular PKE Schemes:
  - [[id:036994b9-0dff-4b8e-adea-283df9012d31][RSA]](key size ~2048 bits)
    - Rivest, Shamir, Adleman
    - Pioneered by Diffie-Hellman key exchange
  - ElGamal (uses the Elliptic Curve Cryptography techniques, reduces key size to ~300 bits)
- PKE as a key management solution
  - [[id:036994b9-0dff-4b8e-adea-283df9012d31][RSA]] is slow, so it will be used to generate a private key for a [[id:7765D5BC-0C92-4AC3-BFA6-822A5517070A][Symmetric Cryptosystem]] such as AES, then both the RSA-encrypted key and the AES-encrypted message will be sent.
  - This removes the requirement to pre-share a key
* RSA
:PROPERTIES:
:ID:       036994b9-0dff-4b8e-adea-283df9012d31
:END:
 - We cover only the basic form of RSA in this class
   - Real implementations employ padding and special restrictions on the parameters
 - The data will be represented as integers, and the algorithms are operations on the integers
 - The integer's binary representation is the "actual" data we are sending
 - How it works:
   - Two large primes \(p\) and \(q\) are selected
   - Calculate \(n = pq\)
   - Choose an exponent \(e\) s.t. \(gcd(e, \phi (n)) = 1\)
     - We also know \(\phi (n) = (p-1)(q-1)\) because \(n\) is the product of two primes.
     - \(\phi (n)\) is the totient function, the number of values less than \(n\) which is relatively prime to \(n\)
   - Determing \(d\) such that \(de \equiv 1 (\mod \phi (n))\) (i.e. \(d\) is the modular inverse of \(e\) mod \(\phi (n)\))
   - Our public key is \((n, e)\), and our private key is \((n, d)\)
     - \(p\) and \(q\) may be discarded for security, since they are no longer required
   - To encrypt a plaintext \(m\), we calculate the ciphertext \(c=m^e (\mod n)\)
   - To decrypt a ciphertext \(c\), we calculate the plaintext \(m=c^d (\mod n)\)
 - Ok but like how:
   - \(d\) can be calculated easily using the Extended Euclidean Algorithm
     - This allows us to solve \(x\) and \(y\) when \(ax+by=gcd(a,b)\)
     - We let \(a = e, b= \phi (n), x=d\). This means \(gcd(a, b)=1\) by definition
     - This gives us the equation \(ed + \phi (n) y = 1\), which is identical to the original equation
     - [[file:media/extended-euclidian-algorithm_1.png][Example]]
   - \(m^e\) and \(c^d\) can be easily found by doing successive squaring, logarithmic time
 - RSA can be cracked by either factoring n or finding d some other way, which may be easier
   - Smaller n has been shown to be too weak as computers get more powerful
   - Quantum computers can run factorization in polynomial time, which will break RSA once they get practical enough
     - Post-quantum algorithms are now being developed, such as lattice-based cryptography or multivariabe cryptography
 - Real world RSA uses padding
   - We have an issue with "base" RSA where \(E(m_1) * E(m_2) = E(m_1 * m_2)\)
   - Usually an IV is used
   - Also, a padding such as PKCS#1 is used
 - Pitfall: using RSA as a symmetric key setting
   - RSA is much slower than AES
   - May be vulnerable to the same issues as [[id:c407cc60-cb13-401d-b3b1-0dbb8df36fa6][ECB Mode]].
* Hash
:PROPERTIES:
:ID:       e80b6bfc-5b6a-4c2e-ae03-a513f6bef6b5
:END:
- A hash function is a function which takes in an arbitrary amount of data and determinitstically outputs a fixed size digest.
- Non-[[id:287CF85B-BF15-47AE-9C6C-B203F1FDF3DE][Cryptographic]] hash functions designed for efficiency rather than the security requirements are not to be used in a crypto setting
- [[id:b30c808d-acea-428a-9564-6fb356072eb6][Security Models]]
  - Security Requirements:
    - Efficiency: calculating \(h(m)\) is easy
    - Pre-image resistance: calculating \(h^{-1}(m)\) is hard
    - Collision resistance: finding \(m_1 and m_2\) such tht \(h(m_1) = h(m_2)\) is hard
      - Implies pre-image resistance
- Examples
  - SHA-1
    - Succeeds the withdrawn SHA-0 by NIST
    - Considered broken, but still commonly used
      - A collision was theoretically possible to find in \(2^{63}\) time
      - Google applied it in practice: [[http://shattered.io][Shattered]]
    - Now supersceded by SHA-256 or SHA-3
  - MD5
    - Extremely broken, do not use
- Usage
  - Verifying files
    - A website may provide a checksum which is a hash of a file they provide for download, which you can use to verify that you have the correct files
    - [[file:media/hash_1.png][Example]]
  - Password files
    - We can hash the passwords stored on our computers in order to make it hard for attackers to find the original passwords
    - We must add features such as salting (adding random data to our password) such that identical passwords will still have unique hashes (Salt is stored in plaintext next to the passwords)
      - This also helps prevent rainbow table attacks (where attackers have access to a large database of common password-hash pairs)
* Keyed-Hash
:PROPERTIES:
:ID:       b534f6fc-0a19-4899-b0cd-d690668fdce5
:ROAM_ALIASES: MAC
:END:
- Also known as MAC
- A Hash function which also takes in a key
- [[id:b30c808d-acea-428a-9564-6fb356072eb6][Security Models]]
  - Security Requirements:
    - Even when given many valid pairs of messages and the corresponding MAC, an attacker should not be able to generate the MAC for a message not seen before
- Examples
  - CBC-MAC
  - HMAC
- Usage
  - Verifying files in a insecure channel
    - If the key has been pre-shared:
    - [[file:media/mac_1.png][Example]]
    - Generally sent together
** Digital Signature
:PROPERTIES:
:ID:       f6d86fcf-3694-4ae1-999d-d3a087484b83
:END:
- The public key version of [[id:b534f6fc-0a19-4899-b0cd-d690668fdce5][MAC]]
- The public key is used to verify the origin of a file or data
- Signature is sent along with the data so that anyone can confirm who sent the data
- Additional security requirements:
  - Non-repudiation: By using public key version, it is possible to tell for sure who created the signature, since only one party needs to know the private key
- [[file:media/signature_1.png][Signature]]
- [[file:media/signature_rsa_1.png][Signature with RSA]]
  - Note: the roles of public and private keys are flipped since we want only one party be be able to encrypt, but anyone be able to decrypt
- [[file:media/signature_2.png][Example]]
* Birthday Attack
:PROPERTIES:
:ID:       436330df-4367-4ba9-b42c-c33281a5c4b9
:END:
- Birthday Attack works by finding two different sets of data which results in the same hash value.
  - \(h(m_1)=h(m_2)\) when \(m_1 \neq m_2\)
- Birthday paradox: a surprisingly few number of people are required to have a good chance of having a duplicate birthday
- If we have M messages, each paired with a random value chosen from \({v_1, v_2, v_3, ..., v_T}\), then if \(M > 1.17 T^{0.5}\) there is a probability of more than 0.5 that there exists a pair of messages with the same value.
  - In general, the chance that a probability occurs = \(1-e^{\frac{-M^2}{2T}}\)
- Thus, the approximate work factor is the square root of the digest length
* [[id:ba7c1150-8c97-4862-87db-edf38efaa278][Public Key]] Distribution
:PROPERTIES:
:ID:       216301b0-5552-47c6-88d9-b92c5df17683
:END:
- How do you share your public key with other parties across an insecure channel?
  - If an attacker can spoof messages, then they can send a message signed with their own private key and send their own public key
** Public Announcement
:PROPERTIES:
:ID:       9c6f60c8-f1cd-4abf-a875-888d5332837c
:END:
- Just publically broadcast the key
- Could be done through a website, social media, email blast, or even physically
- Issues:
  - Not standardized, there are many different methods to do this
  - At the end of the day, you still need to trust an external entity to distribute the correct key
** Public Directory
:PROPERTIES:
:ID:       a6419e46-f19c-4e98-962a-f54364c9d93c
:END:
- Keep a standardized database of public keys for people
- For example, [[https://pgp.mit.edu][PGP MIT EDU]]
- Issues:
  - Anyone can post their public key, and the server must have some way to verify it
  - You still have to trust the directory server, as well as making sure that the server is the authentic server
  - Single point of failure
  - Performance bottleneck
** Public Key Infrastructure
:PROPERTIES:
:ID:       81f652ea-5fea-453f-aab3-6259684c0efa
:ROAM_ALIASES: PKI
:END:
- AKA PKI
- Objectives:
  - Large scale
  - Verify public keys without requiring the two communicating parties to trust one another
  - Manage public and private keys throughout their lifecycle
- Uses [[id:9a87fcc7-08ee-41b4-a15e-b39782520075][Certificates]] issued by [[id:e9a3e661-4685-4381-b082-21cf94b4699b][CAs]] in order to validate the authenticity of private keys
- May also include online systems which can allow users to check that a certificate has not been [[id:8911cb0c-3b6a-4068-bcbc-c5e6b15dec56][Revoked]]
*** Certificate Authority
:PROPERTIES:
:ID:       e9a3e661-4685-4381-b082-21cf94b4699b
:ROAM_ALIASES: CA
:END:
- Entity which issues and signs digital [[id:9a87fcc7-08ee-41b4-a15e-b39782520075][Certificate]] using its own public-private key pair
- OSes and browsers will have pre-loaded public keys for trusted CAs
  - These root CAs go through stringent checks and audits
- CA needs to check:
  - Whether the requester owns the domain name
  - For higher "classes" of SSL certificates (e.x. Extended Validation SSL certificates), more checks must be done
    - May include manual checks
    - Only EV SSL certs will activate the green address bar (UI elements getting phased out nowadays)
- For distribution purposes, we have intermediate CAs under the root CA which interact with external entities
  - [[file:media/ca-tree_1.png][CA Tree]]
  - This leads to a hierarchy of trust, which allows parties which trust a Root CA to also infer trust on its children
  - The verifier may either receive the intermediate certificates from the sender, or find it through other means
  - [[file:media/certificate-chain_1.png][Certificate Chain]]
*** Certificate
:PROPERTIES:
:ID:       9a87fcc7-08ee-41b4-a15e-b39782520075
:END:
- A digital document which contains:
  - The identity of an owner
  - The public key of that owner
  - The time window for the validity of the certificate
  - The [[id:f6d86fcf-3694-4ae1-999d-d3a087484b83][Digital Signature]] of the [[id:e9a3e661-4685-4381-b082-21cf94b4699b][CA]]
- Used in protocols such as SSL/TLS
- Sent during the handshake process
- Classes:
  - Domain Validation: Does the entity own the domain?
  - Organization Validation: Does the entity's organization exist as a legal entity?
  - Extended Validation: Can the entity prove its legal identity?
*** X.509
:PROPERTIES:
:ID:       b9dd6a31-0ddc-4374-b311-531e538597f0
:END:
- A standardization of the [[id:9a87fcc7-08ee-41b4-a15e-b39782520075][Certificate]] format
- Includes:
  - Version Number
  - Serial Number (unique)
  - Signautre Algorithm ID
  - Issuer Name
  - Validity Period
  - Subject Name
  - Subject Public Key and Algorithm
  - Issuer ID (unique, optional)
  - Subject ID (unique, optional)
  - Extensions (optional)
  - Certificate Signature and Algorithm
- Distinguished Name: a name used to identify an entity
  - Commonly includes:
    - Country
    - State
    - Locale
    - Organization name
    - Organizational unit name
    - Common name
*** Revoking Certificates
:PROPERTIES:
:ID:       8911cb0c-3b6a-4068-bcbc-c5e6b15dec56
:END:
- Non-expired certificates may need to be revoked
  - Private key compromised
  - Issuing CA compromised
  - Entity left the organization
  - Business entity closed
- Different approaches:
  - Certificate Revocation List (CRL)
    - CA periodically signs and publishes a list of revoked certificates
    - Requires a system to periodically download the list
  - Online Certificate Status Protocol (OCSP)
    - Requres an online service to validate a cert
    - Problems:
      - Leak of privacy, since you have to send data to the OCSP which can figure out what sites you are visiting
      - If the responder does not respond, then should the browser treat it as a success or a fail?
    - Solutions:
      - OCSP stapling: A certificate can also include a timestamped OCSP response signed by the CA, so that the verifier's privacy is not compromised
      - TLS handshake: same as stapling but place the OCSP response with the handshake protocol
      - Drawback: Increased network cost
*** Attacks on PKI
:PROPERTIES:
:ID:       e34d94cc-50ef-4983-b709-4b2c469ad124
:END:
- CAs compromised: for example, DigiNotar
- CAs go rogue: allows for man-in-the-middle attacks to occur by CAs which generate spoofed certificates
- Null byte attack: The URL looks the same, but there is a null byte in the URL which has a different, valid certificate, but the user cannot tell
- Similarly, typosquatting attacks may use similar looking URLs to trick users into visiting a spoofed site
* Strong Authentication
:PROPERTIES:
:ID:       de143960-9b2d-4548-bc99-d59421652338
:END:
** Challenge-Response Authentication
:PROPERTIES:
:ID:       4acf93f1-00f7-40e9-b8ae-442012c6d94c
:END:
- [[id:7765D5BC-0C92-4AC3-BFA6-822A5517070A][SKC]] based:
  - Bob encrypts a random message with the secret key k
  - Alice, if she knows the secret key, can recover the message and send it back to Bob.
  - Thus, Bob knows that Alice knows the secret, but the secret was never sent directly.
  - M must be different for each request.
  - This protocol only validates Alice.
- [[id:ba7c1150-8c97-4862-87db-edf38efaa278][PKC]] based:
  - Bob sends a random number to send to Alice
  - Alice signs the random number using her private key
  - Bob checks the signature against Alice's public key.
  - This protocol only validates Alice.
  - More information should be included in the signed message.
- Authentication alone is not sufficient though, since once the authentication occurs [[id:C6BD6271-3B92-4538-9398-FCCA53B7A1B5][Mallory]] can take over as Alice.
  - Thus, the authentication process needs to result in a session key(s) which will be used for future communication
  - This process is known as authenticated [[id:34c2a8d8-8af9-45bd-8e56-0cead8198839][Key Exchange]]
** Key Exchange
:PROPERTIES:
:ID:       34c2a8d8-8af9-45bd-8e56-0cead8198839
:END:
- [[file:media/key-exchange_1.png][Key Exchange]]
- Unauthenticated
  - Alice and Bob want to derive a common key while preventing [[id:28DAED70-FF28-43A9-AABE-A1FC13D0A639][Eve]] from figuring out the key.
  - Method 1: using [[id:ba7c1150-8c97-4862-87db-edf38efaa278][PKC]]
    - [[file:media/key-exchange-pkc_1.png][Diagram]]
  - Method 2: using Diffie-Hellman
    - [[file:media/key-exchange-dh_1.png][Diagram]]
  - However, this method is insecure to an attacker with spoofing capabilities, since that attacker can impersonate Alice to Bob, and impersonate Bob to Alice.
    - [[file:media/key-exchange-mallory_1.png][Diagram]]
- Authenticated
  - Use Diffie-Hellman, with [[id:ba7c1150-8c97-4862-87db-edf38efaa278][PKC]]
    - [[file:media/key-exchanged-authenticated_1.png][Diagram]]
    - This is called "unilateral" authentication, where only one party is authenticating itself to the other.
      - In this case, only one party needs to know the other's public key
      - In the case of mutual authenticated key exchange, both parties needs to know the other's public key.
  - After exchanging one key, all needed session keys can be generated using a Key Derivation Function like HKDF.
** Secure Communication Channel
:PROPERTIES:
:ID:       815013f5-1eab-4dc0-b4ee-ec8c8ead2385
:END:
- Problem: we want to communicate securely over a medium subjected to sniffing and spoofing.
- A "secure channel" establishes a method to communicated between two programs in a way that maintains confidentiality, integrity, and authenticity.
  - [[id:42696A4B-0DFA-435B-858E-D061FEB2CCA0][Confidentiality]]: use Encryption
  - [[id:1FE1E862-1BEC-409A-93BB-7CBF73FACB14][Integrity]]: use [[id:b534f6fc-0a19-4899-b0cd-d690668fdce5][MAC]] or [[id:f6d86fcf-3694-4ae1-999d-d3a087484b83][Digital Signature]]
  - [[id:ba3c205b-306c-4bb8-9803-5e0c9c1460f6][Authenticity]]: use MAC or Digital Signature.
- Example: Alice wants to visit bob.com.
  - [[file:media/secret-channel_1.png][Diagram]]
  - We need sequence number to prevent reordering attacks.
  - Step one: Authenticated [[id:34c2a8d8-8af9-45bd-8e56-0cead8198839][Key Exchange]]
  - Step two: Secure communication
    - For example, encrypt using key, and send MAC using another key, known as encrypt-then-MAC
** Authenticated Encryption
:PROPERTIES:
:ID:       0c7d5802-795f-4b9b-8baa-67f5664a89f4
:END:
- Providing both authenticity and confidentiality
- Encrypt-and-MAC
  - [[file:media/encrypt-and-mac_1.png][Diagram]]
  - Poor MAC may leak information about plaintext
- MAC-then-Encrypt
  - [[file:media/mac-then-encrypt_1.png][Diagram]]
  - Decryption required even if message is corrupted
- Encrypt-then-MAC
  - [[file:media/encrypt-then-mac_1.png][Diagram]]
  - MAC can be checked without decrypting
- AES-GCM
  - (Galois counter mode)
  - [[file:media/aes-gcm.png][Diagram]]
* HTTPS
:PROPERTIES:
:ID:       0edce589-a78d-48cc-834f-ea1bdcd4f3aa
:END:
- HTTP over [[id:0f2997e1-86b0-413b-8435-a221c5786207][TLS]] or HTTP over [[id:131a9663-bd3a-437f-8ad6-6f2b2869a811][SSL]]
* SSL
:PROPERTIES:
:ID:       131a9663-bd3a-437f-8ad6-6f2b2869a811
:END:
- [[id:815013f5-1eab-4dc0-b4ee-ec8c8ead2385][Secure Communication Channel]]
- Predecessor to [[id:0f2997e1-86b0-413b-8435-a221c5786207][TLS]]
- [[file:media/ssl_1.png][Diagram]]
* TLS
:PROPERTIES:
:ID:       0f2997e1-86b0-413b-8435-a221c5786207
:END:
- [[id:815013f5-1eab-4dc0-b4ee-ec8c8ead2385][Secure Communication Channel]] protocol
- Successor to [[id:131a9663-bd3a-437f-8ad6-6f2b2869a811][SSL]]
- Process
  - Well-defined format
  - First, figure out what type of ciphers to use (Diffie Hellman, RSA, etc.)
  - Second, conduct authenticated [[id:34c2a8d8-8af9-45bd-8e56-0cead8198839][Key Exchange]]
    - Ensure that the keys are the same
  - Establish symmetric key based secure communication
  - Renegotiate if needed
- [[file:media/tls_1.png][Diagram]]
* Nonce
:PROPERTIES:
:ID:       69c6c12e-71d7-417a-9185-5e6ed0aa0f34
:END:
- A value used only once.
* Networking Security
:PROPERTIES:
:ID:       790de419-c3ff-4c78-8f23-d82b89726a6b
:END:
- We have developed a [[id:815013f5-1eab-4dc0-b4ee-ec8c8ead2385][Secure Communication Channel]], but we're still missing a few issues
  - Availability (protect against [[id:f2fa5968-ca9a-4530-a0c1-92fc8352482a][DoS]])
  - Anonymity
  - Network protocol attacks (e.x. TLS renegotiation attack)
  - Network access control (e.x. firewalls), monitoring, and management issues
  - Web security
** OSI Layers
:PROPERTIES:
:ID:       2f7fce9d-6645-47b4-aaed-2694b4bdf962
:END:
- See [[id:e0360e0e-695b-4db0-8bda-f1ab12bd6019][OSI Layers]]
- Layers
  - Application (Layer 5 or 7)
    - Sometimes session and presentation are grouped with application
    - Domain name
  - Presentation
  - Session
  - Transport
    - Port number
  - Network
    - IP address (virtual address)
  - Data Link
    - MAC address (physical address)
      - Not the same as [[id:b534f6fc-0a19-4899-b0cd-d690668fdce5][MAC]]
  - Physical (Layer 1)
- For encapsulation, messages are passed down from higher level layers down to lower layers, which may add extra data to the packet
- On the receiver side, the extra data added to each packet is stripped at each level, and passed back up until it reaches the application layer
- Devices
  - Switch
    - Data Link Level
  - Router
    - Network Level
    - [[file:media/router_1.png][Router]]
  - Repeater
    - Physical Level
  - Hubs
    - Physical Level
** Network Security Challenges
:PROPERTIES:
:ID:       32c4eb34-2756-4f40-8a6b-f72dcf3ca662
:END:
- Data is sent through nodes which are owned by different semi-trusted parties
- Legacy systems not designed to be secure against malicious MITM attacks where the attacker can sniff, spoof, block, and modify packets
- Availability cannot be upheld by [[id:287CF85B-BF15-47AE-9C6C-B203F1FDF3DE][Cryptography]] alone
- Some components may be compromised, at any level the attacker can access all information from subsequent layers
- Isolate and control information flow and network access
** Network and Transport Layers
- Hosts have 65,536 TCP ports and 65,536 UDP ports
- Well known ports are allocated from 0 to 1023.
- A connection between two nodes at the transport layer has two ports sending data to each other
- Listening ports are ports where data will be sent to an application
- Closed ports are ports where data will be dropped
- UDP:
  - Send single datagrams
  - Connectionless, unreliable
- TCP:
  - Stream data
  - Reliable data delivery (not the same as secure)
** Name Resolution
:PROPERTIES:
:ID:       6818c383-5414-4cbc-a535-8ac35ef0ace3
:END:
- Protocols which translate higher level names to lower level information (domain to IP, IP to MAC)
*** DNS Attacks
:PROPERTIES:
:ID:       6236182a-8c80-4220-98d6-5702527b36e8
:END:
- See [[id:a3ae3cdc-5328-402e-8c47-177e942fa4fb][DNS]]
- Maps domain name to IP
  - [[file:media/dns_1.png][Diagram]]
- Unencrypted, which leads to MITM attacks
- Single point of failure, which leads to [[id:f2fa5968-ca9a-4530-a0c1-92fc8352482a][DoS]] attacks
*** Address Resolution Protocol
:PROPERTIES:
:ID:       6813e0e8-7937-4568-b148-6b2e9ac1a8e4
:ROAM_ALIASES: ARP
:END:
- Maps IP to MAC
- Broadcast mechanism
- If an attacker on the local network, they can listen to the broadcast
-
** Network Security Tools
:PROPERTIES:
:ID:       ac71b86b-408a-4af2-82e9-a581dd4a5aa5
:END:
*** Wireshark
:PROPERTIES:
:ID:       77e3b912-795e-457d-b870-90ec6b35cf6f
:END:
- Sniffs and reports packets received by a certain interface
- Need to specify good display filters to get good insights into network traffic
*** Nmap
:PROPERTIES:
:ID:       976e8221-6e8b-4d40-b836-4c0e3af9ff1b
:END:
- Scans ports for information (programs, versions, OS, etc)
** Network Security Protocols
:PROPERTIES:
:ID:       aaab0eb3-73c7-45fb-ad43-9d1f8d824420
:END:
- Works at different layers
- Some span across multiple layers
- Need to identify which layer the attacker resides
- "A security protocol that protects layer k would protect information from that layer and above against an attacker sitting at layer k-1 and below"
  - In other words, a protocol like TLS (sitting above the transportation layer) would prevent an attacker at the transportation layer and below (down to physical) from sniffing or spoofing messages
  - Because the protocol sits above the network layer, the IP address can be sniffed
  - If the attacker is in the browser (application layer), even in the presence of TLS, the attacker can still see and spoof the data.
    - Interestingly in this case, the attacker *may not* be able to find the MAC address since the browser doesn't need to know
- Examples
  - TLS/SSL
    - Sits on top of transportation layer
    - Achieves confidentiality and authenticity
  - WPA2
    - Provides protection on layer 2 and layer 1, but not all information is protected.
    - Authentication scheme for WiFi
  - IPsec
    - Works at network layer
    - Protects authenticity of IP addresses, but not confidentiality
    - Prevents attackers from spoofing the target IP, but can still sniff it
* Denial of Service Attack
:PROPERTIES:
:ID:       f2fa5968-ca9a-4530-a0c1-92fc8352482a
:ROAM_ALIASES: DoS
:END:
- An attack on the availability of a system.
- Local attack: a user on the system is stopping services or exhausting resources
  - Easy to mitigate by kicking out the user
- Remote attack: external attackers are sending a lot of request which will crash or slow down the system.
  - Harder to mitigate
- ICMP/Smurf Flood Attack
  - Send ICMP ping to the server, but spoof the source IP to be the victim's IP address
  - The router will broadcast a ping message to all the hosts on the network, which will send ping replies to the victim
  - Now routers are configured to not broadcast such requests
- HTTP spam
  - Flood a web server with requests
  - Generally requires a large amount of attackers, since each attacker can only send a few requests at once
  - Attackers may use a botnet, which allows them to hijack other people's machines to execute the attack. ([[id:ddf05b8d-e2dd-4d51-82e5-e2622bd1a7fb][DDoS]])
** Distributed Denial of Service Attack
:PROPERTIES:
:ID:       ddf05b8d-e2dd-4d51-82e5-e2622bd1a7fb
:ROAM_ALIASES: DDoS
:END:
- DoS attacks with many different attacker machines
- Attackers hijack machines to add to a botnet
- Use a C&C chain to execute attacks using the botnet
- Example: Mirai attack
  - Used misconfigured IoT devices to form a botnet
* Firewall
:PROPERTIES:
:ID:       3a197c8a-004f-41fa-bc8f-26e84f19520c
:END:
- Motivation:
  - Control the flow of traffic between networks (external vs trusted internal)
  - [[id:d3070bb4-3258-48dc-b22b-299e17f1978b][Principle of Least Privilege]]
- Sits at the border between networks
- Controls what traffic is allowed to enter (ingress filtering) and leave the network (egress filtering)
** Demilitarized Zone
:PROPERTIES:
:ID:       fef6294d-b184-4b12-8c1e-04c001469848
:ROAM_ALIASES: DMZ
:END:
- A small sub-network that exposes external services to the untrusted external Internet
- Motivates a two-firewall setup, where one firewall protects the DMZ from external traffic, and another firewall protects the internal network from traffic coming from the DMZ.
** Firewall Rules
:PROPERTIES:
:ID:       81c1d716-8a7c-4693-8f44-da7a5c0fcbee
:END:
- Generally, firewalls are designed to follow a set of configurable rules
- Rules are applied in a top-down manner, the first rule to match the packet will be applied
  - Therefore, the most specific rules are put first, and the least specific rules are put last
  - The last rule should be a catch-all, where any protocol, source, destination, and port number is denied
** Firewall Types
:PROPERTIES:
:ID:       09893fcf-b7c5-4c68-a183-2d40db726b92
:END:
- Traditional packet filters
  - Inspects packet headers and allows or denies based on data such as IP address and ports
- Stateful inspection
  - Maintains a state table of all active connections
  - Filter packets based on active connection states
  - Can drop packets based on understanding of the ongoing connections
- Application proxy
  - Understand application level logic
  - Checks application payload to determine if the request is valid
* Network Security Management
:PROPERTIES:
:ID:       3ae640fb-8a1f-4337-b2b3-d4d38533d312
:END:
- Continuously monitor and adjust network characteristics
- Security Operations Center (SOC)
  - A centralized unit which monitors the systems and deals with security issues
- Security Information and Event Management (SIEM)
  - Real time analysis of security alerts
* Principle of Least Privilege
:PROPERTIES:
:ID:       d3070bb4-3258-48dc-b22b-299e17f1978b
:END:
- Users should only be allowed to do things that they need to do, both external and internal users
* Operating System Layering
:PROPERTIES:
:ID:       ebb53d30-0ffe-4591-9023-b320bdbabf63
:END:
- Security concern regarding access to processes and memory/storage
- Utilize layering in operating systems
  - Conceptually, may look something like User process > System services > Kernel > Hardware
- Layer 0, the most privileged, to Layer k, the least privileged
- If an attacker gets to Layer 1, we want to prevent them to directly manipulate resources reserved to Layer 0
  - Hard to prevent privelege escalation in all cases
- We want to know what layer a security mechanism resides
  - Malware at lower layers is hard to detect using mechanisms at higher layers
- We want to accomplish a well-defined security boundary between the layers
  - This is generally hard to do in the real world
* Access Control
:PROPERTIES:
:ID:       b8235a02-6f36-46cb-9dd5-b8269e5d4a6e
:END:
- The goal of access control is to let specific entities access certain resources, and block other entities from doing so.
- Enforce a restriction of operations on objects by entities (subjects)
- A reference monitor, or guard, must determine whether or not requested operations should be carried out
  - Examples:
    - Student wants to make a luminus forum post?
    - Student wants to view another student's grades?
- Vocab:
  - Principles: the users
  - Subjects: the entities in the system that operate on behalf of the principle, such as a process
  - Observe: read
  - Alter: edit, delete, change
  - Action: execute
- Conceptually, every object has an "owner"
- Two approaches to object access rights:
  - Discretionary Access Control: The owner gets to decide the rights
  - Mandatory Access Control: The system designer decides the rights, which are applied globally
- Access control matrix
  - Systemwide table which specifies whcih principle can read, write, and execute each object
  - However, the space requirement grows with each extra principle and object
- Access control list
  - Each object has its list of access rights attached
  to it as a list ("object centric")
  - Drawback: hard to go the other direction: can't easily answer the question "what can <principle> do within this system?"
  - Too large
- Capabilities
  - Each subject is given a list of capabilities ("subject centric")
  - Drawback: hard to go the other direction: can't easily answer the question "who can do <operation> withing this system?"
  - Too large
- Simplification:
  - Both ACL and Capabilities are too large as we get more subjects and objects, so how do we simplify them?
  - System is much too fine grained
  - Use Groupings: [[id:f2a45357-68ac-4d96-9812-8a8008c83052][ACL in Unix]]
** ACL in Unix
:PROPERTIES:
:ID:       f2a45357-68ac-4d96-9812-8a8008c83052
:END:
- ACL specifies rights for:
  - user: the owner
  - group: the owner's groups
  - others: everyone else
** Privilege-based ACL
:PROPERTIES:
:ID:       4c21bd6d-c72e-4c05-b73e-cf78a274533c
:END:
- Subjects are granted certain priveleges (e.x. admin, user, superadmin, etc.)
- Each privilege/role comes with the ability to carry out a certain set of procedures
- Privileges should be assigned following the [[id:d3070bb4-3258-48dc-b22b-299e17f1978b][Principle of Least Privilege]]
** Protection Rings
:PROPERTIES:
:ID:       1ee5ed9f-8c1d-4a0a-9a4e-1d581d0307eb
:END:
- Subjects and objects are assigned numbers, where smaller numbers indicate more importance
- Objects with higher numbers cannot access objects with smaller ring numbers
  - In such a case, privilege must be escalated to do so
- Linux uses 2 rings: superuser and normal
  - Superuser: access any file
  - User: limited access based on [[id:f2a45357-68ac-4d96-9812-8a8008c83052][ACL]] rules
* UNIX Access Control
:PROPERTIES:
:ID:       4ed4709f-c1b2-4db3-9bd7-f7b499488011
:END:
** UNIX Objects
:PROPERTIES:
:ID:       c25886ef-b808-4a31-b9ae-0ccc93fe82d7
:END:
- "Everything is a file"
- I/O objects, such as stdin, are all files under /std/dev
- Thus, permissions are also applied accordingly
- File system:
  - Permission string looks like:
    - "-" for file or "d" for directory
    - "rwxrwxrwx", if the character is there the subject has access to read, write, or execute, if not then they do not. The first three letters pertain to the user, the second three are the group, and the last three are others
    - "s" may replace "x" in the user position representing setuid enabled (implies executability)
    - "s" may replace "x" in the group position represnting setgid enabled (implies executability)
  - ls also includes file size and modification date
  - Each file has a user and group
  - Changed using chmod
    - "-R": recursive, applies to all files in dir
    - "-f": force continuing after errors
    - "-v": verbose
    - "+": add permissions
    - "-": remove permissions
    - "=": set permissions
    - "u": user
    - "g": group
    - "o": others
    - "a": all
    - Example: chmod a+x file gives execute permission to everyone
    - Octal mode:
      - 3 digits of a 3 bit number corresponing to the rwx bits
      - 1 additional optional leading digit for the special permissions
      - Order: user, group, other
      - 777 means all permissions for everyone
  - Other special permissions:
    - setuid
    - setgid
    - sticky
- Permission checking:
  - Only applies to non-superusers
  - If the user is the owner, use the owner permission bits
  - Otherwise, if the user is in the group, use the group permission bits
  - Otherwise, use the other permission bits
** UNIX Subjects/Principles
:PROPERTIES:
:ID:       ea062689-4969-46ee-9789-a4752d9de4d2
:END:
- Users:
  - Unique login name
  - Unique ID
  - At least one group
  - Entry in /etc/passwd has the name as well as the user's first group
  - Other groups for the user in /etc/group
- Groups:
  - Unique group name
  - Unique ID
- UIDs and GIDs are used to determine permisssions for each file
- Superuser:
  - UID 0, Group 0
  - Usually named root
- /etc/passwd:
  - Must be world readable since non-root processes need access
  - Previously the password hash was stored there, leading to offline password attacks by non-priveleged users
  - Eventually, password hash moved to /etc/shadow, which does not need to be world readable
- /etc/shadow:
  - Entries have format: <name>$<hash method ID>$<salt>$<hashed password>
- Processes:
  - Each process spawned by forking from parent process
  - Process are associated to a user, and have a PID
** Privilege Elevation
:PROPERTIES:
:ID:       5ab4c809-bfff-4c61-a978-535f912ed3b4
:END:
- Motivations:
  - Some resources are gated to only the superuser, for example, using ports 0-1023 or changing password
  - Non-root users need to do some of these operations
  - However, we can't give them superuser privilege just to do so under the [[id:d3070bb4-3258-48dc-b22b-299e17f1978b][Principle of Least Privilege]]
- Solution:
  - Allow low priveleged users to execute some high privelege executables which can selectively access certain objects in a specified way (for example, passwd to only allow you to change your own password)
- Pitfalls:
  - The high privelege executables must be secured, and only allow certain types of operations.
  - Otherwise, low privelege users can uitlize such an executable to conduct a [[id:93f67ad4-cad3-48e0-86d0-4e2c16adaec3][Privelege Escalation Attack]]
- How:
  - Use the setuid permission for the executable
  - The privelege of the executable is set to the privelege of the owner of the executable
    - For example, if the executable is owned by root, the setuid bit is flipped to 1, and a non-root user executes it, the executable will be run with root privelege
    - If, instead, the executable was owned by bob, then the executable will be run with bob's priveleges
  - OS will still check the "real UID" along with the "effective UID"
    - real UID is who actually executed the file
    - effective UID is who's permissions the file is running with, i.e. who is treated as the subject of the process
    - If setuid = true, then real UID = executor, effective UID = file owner
    - If setuid = false, then real UID = effective UID = executor
  - Note: checks will still be made to ensure that the user can execute in the first place. If the user doesn't have execute permissions (for example, 700), then the user still won't be able to execute the file, even if setuid is true
  - Note: bash will revert the effective UID to the real UID, so calling code by '/bin/bash ...' or calling a setuid script with a bash shebang will result in privelege reverting to the real uid.
* Privelege Escalation Attack
:PROPERTIES:
:ID:       93f67ad4-cad3-48e0-86d0-4e2c16adaec3
:END:
- When a user gains permissions by utilizing incorrectly designed or incorrectly set-up access control mechanisms
