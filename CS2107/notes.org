:PROPERTIES:
:ID:       D0F12033-8149-4A0A-AD04-1B0754314ADC
:END:
#+TITLE: CS2107 Notes
#+filetags: :CS2107:

- links :: [[id:3B2DB3CE-7EDA-4289-B06B-8882D7749848][CS2107]]
  
* Cybersecurity
:PROPERTIES:
:ID:       EB9F00D0-CAC6-4873-985D-AC4BF9F01C09
:END:

- What does security really mean?
  - "A [[id:47B9EEDF-4983-47BE-B8E9-251798139859][threat]] is blocked by [[id:16BCFF2F-F89F-4D2F-B629-EC2E2EBA78D9][control]] of a [[id:C0052FB7-4CF6-4487-BDB5-7FA738E64422][vulnerability]]"

* Components of [[id:EB9F00D0-CAC6-4873-985D-AC4BF9F01C09][Cybersecurity]]
:PROPERTIES:
:ID:       B4C9EFC3-3CAE-4D3F-A141-4798C490B3DF
:END:
** Assets
:PROPERTIES:
:ID:       2FC2E041-1497-4A1B-87FE-D2A28737F6C2
:END:
- Objects of value
  - Hardware
  - Software
  - Data and information
  - Reputation

** Threats
:PROPERTIES:
:ID:       47B9EEDF-4983-47BE-B8E9-251798139859
:END:
- Set of circumstances with the potential to cause loss or harm

** Vulnerability
:PROPERTIES:
:ID:       C0052FB7-4CF6-4487-BDB5-7FA738E64422
:END:
- Weaknesses in a system

** Control
:PROPERTIES:
:ID:       16BCFF2F-F89F-4D2F-B629-EC2E2EBA78D9
:END:
- A method of countering threats

* Why is security hard?
:PROPERTIES:
:ID:       21dce284-1d50-4427-8140-c353334f4b64
:END:
- Why can't we blame the developers?
  - Many developers lack the adversarial thinking to address potential problems during the development stage.

* CIA
:PROPERTIES:
:ID:       B165C62D-4F62-4818-A7AC-391B65877BC5
:END:

- Requrirements for [[id:EB9F00D0-CAC6-4873-985D-AC4BF9F01C09][security]].
** Confidentiality
:PROPERTIES:
:ID:       42696A4B-0DFA-435B-858E-D061FEB2CCA0
:END:
- [[id:99FB3BDD-CFF6-42FF-AC75-1A8DB3CEE9B4][Privacy]], anonymity
- Covert channel
- Plausible deniability

** Integrity
:PROPERTIES:
:ID:       1FE1E862-1BEC-409A-93BB-7CBF73FACB14
:END:
- Process integrity
- Authenticity
  - Validate message sender/origin
- Non-repudiation
  - Digital signature

** Availability
:PROPERTIES:
:ID:       932259C5-7559-4B50-9133-5B00E0002256
:END:
- Information is accessible to the intended people

** Authenticity
:PROPERTIES:
:ID:       ba3c205b-306c-4bb8-9803-5e0c9c1460f6
:END:
- Knowing and verifying who a message is from
* Tradeoffs
- Ease of use
- Performance
- Cost
- Security, functionality, usability triangle

* Privacy
:PROPERTIES:
:ID:       99FB3BDD-CFF6-42FF-AC75-1A8DB3CEE9B4
:END:

- A.K.A. PII

* Cryptosystems
:PROPERTIES:
:ID:       03871803-1117-479D-90D9-90A648B192EF
:END:
- The general flow has plaintext to cyphertext back to plaintext.
  - When evaluating the system, we assume that the cyphertext is known to any attackers
    - In general, we assume that the attacker can read all data sent accross the communication channel
  - Requirements:
    - Correctness
      - For any given plaintext, applying the encryption and decryption will result in the original plaintext
    - Security
      - An attacker will not be able to figure out the plaintext.
    - Performance
      - The encryption and decryption steps must be sufficently fast, and use sufficiently small keys and cyphertexts.
      
** Symmetric vs Asymmetric Cryptosystems

*** Symmetric Cryptosystem
:PROPERTIES:
:ID:       7765D5BC-0C92-4AC3-BFA6-822A5517070A
:END:
- The same [[id:DE8B7A61-3F92-4079-8F99-035A82B5CFF6][key]] is used for encryption and decryption of plaintext data.

*** Asymmetric Cryptosystem
:PROPERTIES:
:ID:       7A154837-3682-4C60-BC05-A284FC06290E
:END:
- Different [[id:DE8B7A61-3F92-4079-8F99-035A82B5CFF6][keys]] are used for encryption and decryption of plaintext data.

* Cryptology
:PROPERTIES:
:ID:       4AB2DE71-90AE-47A8-85E2-23C7361DAF21
:END:

- [[id:287CF85B-BF15-47AE-9C6C-B203F1FDF3DE][Cryptography]] + [[id:18A7FDEC-431B-4D8C-A0C2-93831A0A2F5B][Cryptanalysis]]

** Cryptography
:PROPERTIES:
:ID:       287CF85B-BF15-47AE-9C6C-B203F1FDF3DE
:END:
- The act of creating cyrptosystems

** Cryptanalysis
:PROPERTIES:
:ID:       18A7FDEC-431B-4D8C-A0C2-93831A0A2F5B
:END:
- The act of studying and breaking cryptosystems

* Characters
:PROPERTIES:
:ID:       C4D031D7-4879-4D41-A60F-21234529EB2C
:END:
- Recurring characters in stories about [[id:03871803-1117-479D-90D9-90A648B192EF][Cryptosystems]]
** Alice
:PROPERTIES:
:ID:       FA0748AA-F706-4A4B-8369-917B8928E52B
:END:
- Usually the sender of a message.
** Bob
:PROPERTIES:
:ID:       C0FD5E9B-B0B4-4547-B38A-725D46A09C0E
:END:
- Usually the recipient of a message.
** Eve
:PROPERTIES:
:ID:       28DAED70-FF28-43A9-AABE-A1FC13D0A639
:END:
- An "evesdropper", who passively reads the communication channel.
** Mallory
:PROPERTIES:
:ID:       C6BD6271-3B92-4538-9398-FCCA53B7A1B5
:END:
- A "malicious actor", who actively reads and edits the communication channel.

* Key
:PROPERTIES:
:ID:       DE8B7A61-3F92-4079-8F99-035A82B5CFF6
:END:

- A set of data used in encryption and/or decryption of data within a [[id:03871803-1117-479D-90D9-90A648B192EF][Cryptosystem]].

* Key Space
:PROPERTIES:
:ID:       0FD182B5-6597-4D82-A45D-9F5A2F32E5A6
:END:
- The set of all possible [[id:DE8B7A61-3F92-4079-8F99-035A82B5CFF6][keys]] for a particular [[id:605D780C-F8CA-4C2A-A008-1D2019935535][cipher]].

* Key Size
:PROPERTIES:
:ID:       099f0004-fd96-43ee-b583-24f2528d6893
:END:
- The number of bits needed to represent the [[id:DE8B7A61-3F92-4079-8F99-035A82B5CFF6][Keys]] of the [[id:0FD182B5-6597-4D82-A45D-9F5A2F32E5A6][Key Space]]
** Proving Key Size is Correct
:PROPERTIES:
:ID:       c1f5bc20-33c0-4e0b-8410-204b4f3efb7e
:END:
- Method: index pairs table
  - Essentially prove that for every value representable using N bits, mapping it to one [[id:DE8B7A61-3F92-4079-8F99-035A82B5CFF6][Key]] will cover the [[id:0FD182B5-6597-4D82-A45D-9F5A2F32E5A6][Key Space]] by using all possible N bits
  - AKA are there at least as many values represented by N bits as there are possible keys?

* Ciphers
:PROPERTIES:
:ID:       605D780C-F8CA-4C2A-A008-1D2019935535
:END:

- A scheme for encrypting plaintext

* Attacking a Cipher
:PROPERTIES:
:ID:       51F8780E-D175-4194-9C9B-803B07FB500B
:END:
- An attacker's goal is generally to find the key, in order to determine the plaintext
- It could also be simply to figure out some limited information about the plaintext.
- Generally, to commence an attack, an attacker would know some information about the [[id:605D780C-F8CA-4C2A-A008-1D2019935535][Cipher]]

** Known Plaintext
:PROPERTIES:
:ID:       51C901FF-09EA-40C6-AE8E-107F33D1D66D
:END:
- Some pairs of plaintext and its corresponding cyphertexts.
  - In many cases the attacker can guess at what the plaintext is depending on the context of the data (email headers, HTML headers, common words, etc.)
  - If a cipher can be broken when we have this information, we call it "insecure under known-plaintext attack" or "broken under known-plaintext attack".

** Ciphertext Only
:PROPERTIES:
:ID:       50B37D8A-18F7-49B5-B0D5-917D42BA7F02
:END:
- A large number of cyphertext all using the same key.
  - In some cases, especially with human languages, many substrings have much higher frequency in usage.
  - If a cipher can be broken when we have this information, we call it "not secure under cyphertext-only attack".

* Simple Ciphers
:PROPERTIES:
:ID:       0937F10B-AF62-460A-BCB9-CBB65A3AFB5E
:END:
- Simple [[id:605D780C-F8CA-4C2A-A008-1D2019935535][Ciphers]] are schemes used for studying basic cryptology.

** Substitution Cipher
:PROPERTIES:
:ID:       A7E04A38-A085-4646-B01F-94D9EAFA157F
:END:
- Each character is mapped to another character.
- [[id:0FD182B5-6597-4D82-A45D-9F5A2F32E5A6][Key Space]]
  - All possible permutations of the alphabet
  - AKA all possible bijections between the set of characters and itself.
- [[id:099f0004-fd96-43ee-b583-24f2528d6893][Key Size]]
  - Each key is a permutation of the 27 letters in the alphabet
  - Naive method: 1 byte per letter = 8 * 27 = 216
  - Smarter method: 5 bits per letter = 5 * 27 = 135
  - Theoretical lower bound: $\log_2(27!) \approx 94$
    - $2^{94} = 1.9E28$
    - $27! = 1.0E28$
- Not secure under [[id:51C901FF-09EA-40C6-AE8E-107F33D1D66D][Known Plaintext]] or under [[id:50B37D8A-18F7-49B5-B0D5-917D42BA7F02][Ciphertext Only]] attacks.
** Permutation Cipher
:PROPERTIES:
:ID:       cd202af0-25ca-4c9d-a11a-ddc63ca59014
:ROAM_ALIASES: "Transposition Cipher"
:END:
- A key uses a key length t and a list of numbers representing a permutation of the numbers from 1 to t.
- For each group of t characters, permutate the characters as given by the list
- Not secure under [[id:51C901FF-09EA-40C6-AE8E-107F33D1D66D][Known Plaintext]]
  - Given the plaintext you can easily figure out the key length, and then the list of permutation itself very trivially
- Not secure under [[id:50B37D8A-18F7-49B5-B0D5-917D42BA7F02][Cyphertext Only]]
  - If the text is known to be some language, then words and phrases can be guessed at
** One Time Pad
:PROPERTIES:
:ID:       cc5982a8-8c3e-453c-9393-fa278a1c8f8e
:END:
- Utilizes the [[id:11af3871-9e7c-4b46-92f5-8ee8acd06481][XOR]] operation
- Needs a n-bit key for a n-bit plaintext
- XOR the plaintext with the key
- Decrypt by XOR the ciphertext with the key
- Key must be random and used only once
- Under [[id:51C901FF-09EA-40C6-AE8E-107F33D1D66D][Known Plaintext]], the key can be found but it will not be used any more
- Impossible to find the key under [[id:50B37D8A-18F7-49B5-B0D5-917D42BA7F02][Ciphertext Only]]
  - Any n-bit plaintext can result in a specific n-bit ciphertext given the correct key
- "Unbreakable"/"[[id:0864648d-4915-4973-9b93-0f513ee5e5d6][Perfect Secrecy]]" given unlimited computing power and time, as long as the key is not reused
- No information about the plaintext can be gained given a ciphertext
  - Except the length, but can also be mitigated if messages are all padded out
- Weaknesses
  - Length of the key = length of the plaintext, so becomes hard to use in many applications (like without a machine)
  - [[https://www.nsa.gov/portals/75/documents/about/cryptologic-heritage/historical-figures-publications/publications/coldwar/venona_story.pdf][The Veona Story]]: Broken OTP due to repeated key
- Usage: [[https://ciphermachines.com/onetimepad.html][Cipher Machines]]
* XOR
:PROPERTIES:
:ID:       11af3871-9e7c-4b46-92f5-8ee8acd06481
:END:
- "Are the bits different" operation
- Associative operation
- Applying it twice to one bit string with the same other bit string results in the original one.
- Applying it to itself becomes 0
* Perfect Secrecy
:PROPERTIES:
:ID:       0864648d-4915-4973-9b93-0f513ee5e5d6
:END:
- $Pr(X = x | Y = y) = Pr(X = x)$ given any distribution X, for all x and y
- "The probability that the plaintext is any given value is equal to the probability that the plaintext is that value given the ciphertext"
- "No knowledge is gained by knowing the ciphertext"

* Security Models
:PROPERTIES:
:ID:       b30c808d-acea-428a-9564-6fb356072eb6
:ROAM_ALIASES: "Attack Models"
:END:
- Security achieved by an encryption is formulating by stating the class of attacks that it prevents
- Attack described by:
  - Attacker's goal
  - Attacker's capability
- Attack models are application-dependant
** Encryption Security Models
:PROPERTIES:
:ID:       626045a3-13e4-43d8-8b2d-724b0e40fb6d
:END:
- Capabilities
  - [[id:50B37D8A-18F7-49B5-B0D5-917D42BA7F02][Ciphertext Only]]
  - [[id:51C901FF-09EA-40C6-AE8E-107F33D1D66D][Known Plaintext]]
  - Chosen Plaintext
    - Attacker can get the ciphertext for arbitrary plaintexts through use of some black box (usually contacting the server) "The Encryption Oracle"
    - In a public key scheme, the encyrption oracle is always available
  - Chosen Ciphertext
    - Attacker can get the plaintext for arbitrary ciphertexts through use of some black box "The Decryption Oracle"
  - In these attacks the attacker can "adapt", meaning give different inputs to the oracle based on the previous outputs
- Goals
  - Total break
    - Find the encryption key
  - Partial break
    - Find the plaintext of a cipher
    - Find some information about the plaintext
* Comparing Models
:PROPERTIES:
:ID:       2cff7ab5-1b5f-4195-bf3c-3f576551a604
:END:
- If under an attack model a system $S_1$ prevents more attacks than $S_2$, then $S_2$ is more secure than $S_1$, specifically *with respect to the [[id:b30c808d-acea-428a-9564-6fb356072eb6][Attack Model]]*
- The goal is to prevent attacks under the strongest capability and the weakest goals
- Modern ciphers aim for [[id:0864648d-4915-4973-9b93-0f513ee5e5d6][Perfect Secrecy]] under Chosen Plaintext ([[id:626045a3-13e4-43d8-8b2d-724b0e40fb6d][Encryption Security Models]])
* Block Ciphers
:PROPERTIES:
:ID:       4a483da5-7655-4fe5-b67b-d724b2ee1d8d
:END:
- [[id:605D780C-F8CA-4C2A-A008-1D2019935535][Ciphers]] which operate on blocks of data at a time
- Use an [[id:52f7f8f6-2a6c-4286-866c-1d9e337237ec][IV]] to make keys non-deterministic
- Properties:
  - Has a block size: number of bits in a plaintext (n)
  - Has a keys size: number of bits in a key size (s)
- Examples:
  - DES n=64bits, s=56bits
    - Became searchable as computing power increased
  - 3DES n=64bits, s=168bits (is literally just 3 applications of DES)
  - AES n=128bits, s=128, 192, 256bits
    - Selected by NIST among many other proposals
    - "Rijndael", proposed by Belgian researchers Daemen and Rijmen
    - Still in use today
- Longer key = more secure, slower
- Techniques:
  - Substitution-permutation network (AES)
  - Feistel scheme (DES)
* Stream Ciphers
:PROPERTIES:
:ID:       82e3a5fd-e575-4bdd-8e78-90b18b84b031
:END:
- [[id:605D780C-F8CA-4C2A-A008-1D2019935535][Ciphers]] which operate on a stream of data (such as [[id:cc5982a8-8c3e-453c-9393-fa278a1c8f8e][One time Pad]])
- Good for streaming data which needs low latency
- May be known as "pseudo/simulated OTP"
  - Generates a one time pad key using a much smaller key, using a [[id:287CF85B-BF15-47AE-9C6C-B203F1FDF3DE][Cryptographically]] secure pseudorandom process
  - Weaness: generation is deterministic
    - This means that the same key will be generated every time
    - If given two ciphertexts using the same key, by XORing them together you get the XOR of the two plaintexts
    - Depending on the structure of the data information will be leaked
  - Solution: use an [[id:52f7f8f6-2a6c-4286-866c-1d9e337237ec][IV]]
* IVs
:PROPERTIES:
:ID:       52f7f8f6-2a6c-4286-866c-1d9e337237ec
:END:
 - Generate data by using an IV (Initialization Vector)
 - IV must be different for each plaintext
 - IV must be shared between both sender and recipient such that the same keystream can be generated
 - IV is in the clear (may or may not be considered part of the ciphertext depending on who you ask)
* Stream Ciphers vs Block Ciphers
:PROPERTIES:
:ID:       2539627c-eb3f-4ca4-bfb2-08bc3f82fccd
:END:
- [[id:82e3a5fd-e575-4bdd-8e78-90b18b84b031][Stream Ciphers]]
  - Pros
    - Speed of transformation
    - Low error propagation
  - Cons
    - Low [[id:efc76398-34e2-4e48-aaa6-df034c082796][Diffusion]]
    - Susceptibility to malicious modification
- [[id:4a483da5-7655-4fe5-b67b-d724b2ee1d8d][Block Ciphers]]
  - Pros
    - High [[id:efc76398-34e2-4e48-aaa6-df034c082796][Diffusion]]
    - Immunity to insertion of data
  - Cons
    - Slow
    - Padding
    - Errors affect larger amounts of data
* Diffusion
:PROPERTIES:
:ID:       efc76398-34e2-4e48-aaa6-df034c082796
:END:
- A change in the plaintext causes many changes in the ciphertext
- A part of the ciphertext depends on many parts of the plaintext
- Means that attackers need a large amount of ciphertext to infer the encryption algorithm
* Confusion
:PROPERTIES:
:ID:       1f2fd325-589c-442d-96be-eeba13e18217
:END:
- Attacker should not be able to predict the output of the encryption when a single character of the plaintext or the key is changed

* Exhaustive Search
:PROPERTIES:
:ID:       13695deb-3d7e-40cc-8625-59c18476e61f
:END:
- All ciphers are vulnerable to exhaustive search (except OTP)
- If the key length is 56 bits, there are $2^{56}$ possible keys
- The time for an exhaustive search is thus:
  - $2^{56}$ worst case
  - $2^{55}$ average
- Schemes can be stronger w.r.t exhaustive search based on how many keys must be searched to break the cipher
- Some schemes have more efficient search schemes
  - For example, in 2048-bit RSA, only about $2^{112}$ searches are required
  - Thus we can say that 2048-bit RSA has the key strength of 112 bits

* Modes-of-Operation
:PROPERTIES:
:ID:       01929c27-22c2-45b8-a539-47b2a9e6d39b
:END:
- Answers the question: "how do we encyrpt an arbitrarily long plaintext using a [[id:4a483da5-7655-4fe5-b67b-d724b2ee1d8d][Block Cipher]]?"
- Extends the encryption from single to multiple blocks, securely
** Electronic Codebook Mode
:PROPERTIES:
:ID:       c407cc60-cb13-401d-b3b1-0dbb8df36fa6
:ROAM_ALIASES: "ECB Mode"
:END:
- Split the plaintext into blocks, apply the block cipher to each block with the *same key*
- Insecure (leaks information about the plaintext)
  - When two blocks contain the same data, their output ciphertext will be the same.
    - This is an issue, for example, when encrypting an image which has consistant colors, since many blocks may be repeated.
    - This issue arises because AES is deterministic.
    - If we use a random [[id:52f7f8f6-2a6c-4286-866c-1d9e337237ec][IV]] instead, the algorithm becomes probabilistic
    - This leads to possible solutsions such as including a random IV with each block
      - This is secure but leads to large sizes (~ double the size of the plaintext)
** Cipher Block Chaining Mode
:PROPERTIES:
:ID:       cecab1ed-7de2-4e50-98a1-2b98d0f543a5
:ROAM_ALIASES: "CBC Mode"
:END:
- Building off the technique in [[id:c407cc60-cb13-401d-b3b1-0dbb8df36fa6][ECB Mode]]
- Start with a single [[id:52f7f8f6-2a6c-4286-866c-1d9e337237ec][IV]], to be used only on the first block
- For subsequent blocks, the IV is equal to the output ciphertext of the previous block
- [[file:media/cbc_1.png][CBC]]
- Issues
  - If one block gets corrupted the rest are also corrupted
  - No parallelization
** Counter Mode
:PROPERTIES:
:ID:       5a35c2ef-ea90-48f0-911d-17014d43a05f
:ROAM_ALIASES: "CTR Mode"
:END:
- Uses a [[id:4a483da5-7655-4fe5-b67b-d724b2ee1d8d][Block Cipher]], but acts closer to a [[id:82e3a5fd-e575-4bdd-8e78-90b18b84b031][Stream Cipher]]
- Start with single [[id:52f7f8f6-2a6c-4286-866c-1d9e337237ec][IV]]
- Increment it for each block
- Apply the blcok cipher to the IV
- [[id:11af3871-9e7c-4b46-92f5-8ee8acd06481][XOR]] the IV with the plaintext to get the ciphertext
- Essentially the application of the block cipher to a sequence of increasing IVs will generate an acceptably random keystream
- [[file:media/ctr_1.png][CTR]]
* Meet-in-the-Middle Attack
:PROPERTIES:
:ID:       f9d73516-fc1c-4f71-9de4-8098c4f7e160
:END:
 [[id:0826056f-f8ab-48d8-b4a3-4d62b40119a4][2DES]] key length is 2 * 56 bits = 112 bits
- But, is the strength really equivalent to 112 bits?
- Meet-in-the-Middle is a [[id:51C901FF-09EA-40C6-AE8E-107F33D1D66D][Known Plaintext]] attack
- The problem: Given c and m, find the two keys used for 2DES encryption
  - From the plaintext m, run encryption for all possible keys $k_1$
  - Similarly, from the ciphertext c, run decryption for all possible keys $k_2$
  - If a value occurs as the output of the encryption of m and as the output of the decryption of c, then the keys used in that pair is the key set used
  - This reduces the [[id:13695deb-3d7e-40cc-8625-59c18476e61f][Exhaustive Search]] timing from $2^{112}$ to $2^{57}$
    - In general, the search time for applying this attack will be just $2^{k + 1}$ assuming the encyrption is applied twice.
* 2DES
:PROPERTIES:
:ID:       0826056f-f8ab-48d8-b4a3-4d62b40119a4
:END:
- [[id:4a483da5-7655-4fe5-b67b-d724b2ee1d8d][DES]] is not secure w.r.t. today's computing power
- Apply it twice or more to increase key space
- 2DES applies DES twice

* 3DES
:PROPERTIES:
:ID:       9d765281-0e63-4521-9aa8-f39ae9589e00
:END:
- [[https://en.wikipedia.org/wiki/Triple_DES][3DES wikipedia]]
  - Different keying options
- Used before AES was fully developed
- No efficient attacks currently, but is inefficient to use compared to AES.
* Padding Oracle Attack
:PROPERTIES:
:ID:       0920a4ca-e492-441e-85d7-b6d7805782c3
:END:
- Capabilities:
  - A ciphertext and [[id:52f7f8f6-2a6c-4286-866c-1d9e337237ec][IV]] ([[id:50B37D8A-18F7-49B5-B0D5-917D42BA7F02][Ciphertext Only]])
  - Access to the padding oracle
    - Accepts a ciphertext, and will tell the attacker if it is in the correct [[id:fe0cb2f0-461c-4f1a-befc-4d83585b0a8b][Padding]] format
  - No knowledge of the padding oracle's secret key
- Goal:
  - Find the plaintext
- [[id:cecab1ed-7de2-4e50-98a1-2b98d0f543a5][CBC Mode]] is vulnerable to this attack, specifically using [[id:1bbca30f-1ab3-42b7-8b58-c6a47168d989][PKCS #7]]
  - By changing the IV to a new value IV', we can modify the padding at the end
  - Assume there are 3 bytes of padding. We know the last bytes of the plaintext are 3, 3, 3.
  - Set IV' such tht the last bytes are 4, 4, 4, 4. This is easy to derive for the last 3, and we use the oracle to find the correct value for the fourth-to-last
  - [[file:media/padding-oracle_1.png][Padding Oracle]]
  - After we find the correct IV', the corresponding plaintext tells us the original plaintext
  - [[file:media/padding-oracle_2.png][Padding Oracle Derive Value]]
  - Conceptually:
    - We have a bit array M, which when [[id:11af3871-9e7c-4b46-92f5-8ee8acd06481][XOR]]'d with the original IV or a block of ciphertext
    - M will effectively be XOR'd with the first block (or next block, if you are attacking by modifying the ciphertext) of the original plaintext during decryption to produce a modified plaintext x'.
    - We set M such that we can figure out the last bits of x' by virtue of it being a valid PKCS #7 padded value
    - From that, we can know the original plaintext x since we know x' XOR M = x.

* Padding
:PROPERTIES:
:ID:       fe0cb2f0-461c-4f1a-befc-4d83585b0a8b
:END:
** PKCS #7
:PROPERTIES:
:ID:       1bbca30f-1ab3-42b7-8b58-c6a47168d989
:ROAM_REFS: https://en.wikipedia.org/wiki/PKCS_7
:END:
- If the block size is $n$ bytes, but the last block only has $m$ values, then we need $p=n-m$ padding bytes
- Each padding byte will be set to $p$

* [[id:287CF85B-BF15-47AE-9C6C-B203F1FDF3DE][Cryptography]] Pitfalls
- Secure ciphers may be vulnerable if not implemented or adopted properly
  - Don't reuse IV
    - For example, IV derived from filename, but many files may share the same name ([[https://www.schneier.com/blog/archives/2005/01/microsoft_rc4_f.html][Microsoft]])
  - Wrong IV choice
    - IV choice should be psuedorandom, if choosing 1, 2, 3, 4, ... then it is vulnerable ([[https://resources.infosecinstitute.com/ssl-attacks/][BEAST]])
  - Reusing OTP
    - [[https://www.nsa.gov/portals/75/documents/about/cryptologic-heritage/historical-figures-publications/publications/coldwar/venona_story.pdf][Veona Story]]
  - Secure RNG
    - Random based on time may be predictable
    - Use something like /dev/urandom for unpredictable values
  - DIY
    - Don't roll your own crypto
    - It takes an expert to guarantee the security of a system, don't even think about modifying unless you know what you're doing
      - There are many existing solutions based on your constraints (memory, computation power, speed)
  - Reliance on Obscurity
    - Kerckhoffs' Principle: "A system should be secure even if everything about the system, except the secret key, is a public knowledge" (Encryption engine be stolen by attackers, see the Enigma machines used by Nazis in WWII)
    - It is easier to keep a key secret rather than the whole algorithm
    - It is easier to change a key rather than the whole algorithm
    - Standardized algorithms allow for easier communication
    - Public scrutiny of open algorithms encourage better security
    - Should we have security by obscurity?
      - Examples against:
        - RC4 ([[https://en.wikipedia.org/wiki/RC4][Wikipedia]]) was broken when a description was anonymously posted to a mailing group
        - MIFARE Classic ([[https://en.wikipedia.org/wiki/MIFARE][Wikipedia]]) was found to be using a weak algorithm when reverse engineered
      - Examples for:
        - Username: it isn't secret information but should not be shared anyhow
        - Computer network and storage settings: isn't secret but may give attackers an advantage
        - Program used inside the smart card: isn't secret but makes it easier for attackers to identify vulnerabilities
      - It is ok to use it as only *one* of the many security factors.
* Covert Channel
:PROPERTIES:
:ID:       48fa0dee-27fe-4bf0-9337-d073743c82dd
:END:
- An attack that allows transfer of information between processes which should not be able to communicate.
* Side Channel Attack
:PROPERTIES:
:ID:       2fc854d5-befd-402b-823c-0c57c8deb2aa
:END:
- An attack based on additional information provided by the fundamental design of a protocol
* End-to-End Encryption
:PROPERTIES:
:ID:       304afe4f-6676-41ee-a337-8b126bfbd52a
:END:
- A system of communication in which only the two endpoints are able to read the messages.
* Authentication
:PROPERTIES:
:ID:       4ef52bfb-193b-4fee-8332-33018153a3a3
:END:
- The process of assuring either the communicating entity or the origin of a piece of information is the one that it claims to be
- Authentic: the claimed origin is supported by evidence
- Authenticity imples [[id:1FE1E862-1BEC-409A-93BB-7CBF73FACB14][Integrity]] (a stronger mechanism)
** Entity Authentication
:PROPERTIES:
:ID:       0559e28b-44eb-4dd4-91cc-d343594df65b
:END:
- Connection-oriented communication
- Methods: Password, challenge in response, biometrics
- Examples:
  - A website wants to ensure that the user is actually who they say they are, and the user also needs to know that the website is who they claim to be
** Data-origin Authentication
:PROPERTIES:
:ID:       7ebbff58-f3bc-4b78-9d38-9597b0a0022d
:END:
- Connection-less communication
- Communicating entity is the origin of a piece of information
- Methods: MAC or digital signature
- Examples:
  - Is a set of digital or physical data issued by who the document claims to be from?
* Replay Attack
:PROPERTIES:
:ID:       489649f3-c12b-4a87-a61b-ccf5e9966c1e
:END:
- When an attacker sends a copy of what the genuine user sent previously.
* Password
:PROPERTIES:
:ID:       3f75bf07-bf2b-4f70-819c-938598fd43d2
:END:
- A form of [[id:0559e28b-44eb-4dd4-91cc-d343594df65b][Entity Authentication]]
- Stages
  1. Bootstrapping: user and server agree on a password
     - May be done by users or sysadmin/server
  2. Authentication: the user provides the password for the server to verify
  3. Password reset: the user may need to change the password
- The password is a secret, while the associated id (email, username) is not.
  - However, the id must be unique so that the passwords will never come into conflict event when they are not unique (i.e., every user id, password pair needs to be unique)
- Things to note:
  - Every time the password is in the clear is an opportunity for it to be stolen
    - Requests/authentication can be [[id:489649f3-c12b-4a87-a61b-ccf5e9966c1e][Replay Attack]] by attackers
  - Password can be cracked by brute force
  - Storing password in plaintext is bad practice
  - There are many ways to steal or find the password
  - Default passwords are easy to exploit
    - Case study: Mirai botnet + chinese IoT (default password 888888)
** Password Guessing
:PROPERTIES:
:ID:       470fc6fa-c82c-434c-a3ee-f6cfd6397102
:END:
- Online guessing means actually interacting with the server
- Offline guessing means checking the password against some hash/password file
- Guessing socially relavent things may assist in finding the password faster than brute force
- Can also use [[id:fd64bcf7-edf8-456c-a529-23c62e9ab348][Dictionary Attack]]
** Password Eavesdropping
:PROPERTIES:
:ID:       29799090-763a-471d-a301-0eaa743473e0
:END:
- Shoulder surfing (looking at other people enter passwords)
- Sniffing (listening on the communication channel to find the password)
  - Works over insecure protocols such as HTTP
- Sniffing wireless keyboard data
- Seeing how muscles move over zoom and analysis via AI
- Sound made by keyboard
** Login Spoofing
:PROPERTIES:
:ID:       0a57b29c-2b3d-486f-959b-7b1c3444c2f6
:END:
- Create a mimic login page
- Capture the password, potentially checking it with the real server as well
** Password Cacheing
:PROPERTIES:
:ID:       449271e2-2144-4693-be0c-a43a75662cd3
:END:
- When logging in on a public machine, the password may sometimes be stored for later use
** Insider Attack
:PROPERTIES:
:ID:       0440b23f-2ef6-4489-b46b-6a21c08bf5ca
:END:
- Somehow the attack goes through the system administrator, either willingly by a malicious admin or through another attack
- The password data is leaked through the admin
** Stronger Passwords
:PROPERTIES:
:ID:       c9ae42fe-177d-47d1-88bd-42a5cf1d53bb
:END:
- Use randomly chosen passwords, long, and high [[id:1b1ffa4f-135b-41e8-8584-bc5ee549d316][Entropy]](pair with a password manager)
- Other modifications on combinations of words with symbols may be easier to remember while providing a reasonable level of security
- Systems may implement limited login attempts, password strength checker, and password metering to show the user how strong their password is
- Passwords should be stored as a hash, with salt
** Self-Help Password Reset
:PROPERTIES:
:ID:       fb8c56d7-c7f1-4f76-9806-bf1a53baf6d2
:END:
- Allows users to reset password without too much hassle
- Asking security questions: not the most secure secrets
  - Must be safe, memorable, universal, and consistent
  - If you want to use a site with these, just treat them as backup passwords and generate more, store it somewhere else
- One time password: hinges on the email being only accessible by the authorized entity
  - So if the Email is broken into or the OTP is stolen, then the password protected system is broken as well.
* Keylogging
:PROPERTIES:
:ID:       c7b6cb77-7b67-4c34-b2c4-b1f9b548bd88
:END:
- A method to grab data such as a person's [[id:3f75bf07-bf2b-4f70-819c-938598fd43d2][Password]]
- Either done through physical (between the keyboard and the PC), or software means
* Phishing
:PROPERTIES:
:ID:       a7ab4c55-e8a8-43de-a2f5-75c45709b74d
:END:
- Pretending to be someone else (usually an authority) to make a request that would cause the target to leak some data
- Often done through emails requesting a user to log in to some [[id:0a57b29c-2b3d-486f-959b-7b1c3444c2f6][Spoofed]] system to steal [[id:3f75bf07-bf2b-4f70-819c-938598fd43d2][Passwords]]
- [[https://phishtank.com][PhishTank]] can help prevent phishing attack
- Mail servers should also attempt to filter out these attacks.
** Spear Phishing
:PROPERTIES:
:ID:       31fa104e-58b1-4efe-b762-2f63c48ec6fc
:END:
- A phishing attack hypertargeted at a target audience to increase the effectiveness
* Dictionary Attack
:PROPERTIES:
:ID:       fd64bcf7-edf8-456c-a529-23c62e9ab348
:END:
- Using a subset of brute force possible passwords/keys, such as a list of common passwords to speed up guessing, especially when you have arbitrary targets
* Entropy
:PROPERTIES:
:ID:       1b1ffa4f-135b-41e8-8584-bc5ee549d316
:END:
- Measurement of randomness or unpredictability
- Let a set P contain N unique passwords. If a password is chosen randomly and uniformly from the set P, then the entropy of that password is $\log_2(N)$ bits
- If the password is not chosen uniformly, then the entropy will be lower.
- [[id:3f75bf07-bf2b-4f70-819c-938598fd43d2][Passwords]] are reccomended to have around 128 bits of entropy to be secure against offline attacks
* ATM Attacks
:PROPERTIES:
:ID:       d77637a1-ebc7-4e2f-847f-60db674617f5
:END:
- Users are authenticated by a card and a pin
- Cards can be stolen or copied
  - An ATM skimmer can also be used to pull data from the card
  - The attacker must also have the PIN, which can be stolen using a camera or a spoofed keypad
