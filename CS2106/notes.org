:PROPERTIES:
:ID:       3BEC0A0C-17C5-4C68-9937-E44E79DB9C4C
:END:
#+title:CS2106 Notes
#+filetags: :CS2106:
- links :: [[id:539C8BDD-D2EA-4131-8F31-F2C3F0BC3799][CS2106]]

* Operating System
:PROPERTIES:
:ID:       D289CD47-38F4-481F-BED1-FEAF25C4D709
:ROAM_ALIASES: OS
:END:

** Why learn OS?
- Become a better programmer
  - Know how your program is interacting with the OS.
- Become a better software engineer
  - Understand the most complicated program
- Become a better computer user
** What is an OS?
- Invented in order to allow the creation of general-purpose computers which were not hardcoded to do their one job
- Abstractly, was developed as something that can take "code" and cause the effects described by the code.
  - A program that controls a program
- Definition
  - "A program that acts as an intermediary between a computer user (AKA the program) and the computer hardware."
  - [[https://en.wikipedia.org/wiki/Operating_system][Wikipedia]]: "An operating system (OS) is system software that manages computer hardware, software resources, and provides common services for computer programs."
    - "System software" which comes with the system, and does not interact directly with the user
    - Hardware: physical objects
    - Software: virtual objects
    - "Common services": providing tools that allow interaction with the hardware
      - [[id:FAAB67BF-9DDB-4AC3-AA45-472F439686EB][Client-Server Model]]
** QNA
- Isn't the OS an overhead? Wouldn't it be better to do without?
  - It is an overhead but it is worth it in almost all cases, sometimes it can actually save on some resources
  - In some MCUs there is no OS because the computer only has one job
- What if I only have one CPU? How can it run so many things?
  - The OS can take over the CPU ("scheduled to run") and transfer control to other processes
  - Context switching
    - Register data is stored into the memory
  - Hardware is designed for interrupts to be possible
- What is system software?
  - Software in the OS that assists and services the other applications running
** Examples
- PC
  - Windows
  - macOS
  - Linux
  - Solaris
  - FreeBSD
- Mobile
  - Android
  - iOS
- Other
  - XBOX, PlayStation

* Batch [[id:D289CD47-38F4-481F-BED1-FEAF25C4D709][OS]]
:PROPERTIES:
:ID:       D9F3E442-3F6C-48DF-A404-283C7A15CFBA
:END:
- Run user program (jobs) one at a time

* Multiprogramming
:PROPERTIES:
:ID:       70308734-2797-4277-9DF1-5A145F773AC7
:END:

* Time Sharing [[id:D289CD47-38F4-481F-BED1-FEAF25C4D709][OS]]
:PROPERTIES:
:ID:       6276534B-2CDD-4F8B-BD8A-73DDEA2C1A31
:END:
- Allows multiple points of interaction using terminals (teletype, AKA TTY)
- Schedule user jobs
  - Illusion of [[id:62A2FCE1-6909-4C5A-8D25-015D1F2FAAFA][concurrency]]
- Memory management / provisioning between jobs
- CPU time, memory, and storage are split between the [[id:CEED7EB1-C9DD-40C6-ABBF-32D3E41FA6F7][users]].
*** Examples
- CTSS at MIT, 1960s
- Multics, 1970s


* [[id:D289CD47-38F4-481F-BED1-FEAF25C4D709][OS]] Implementations
:PROPERTIES:
:ID:       28C8C09A-0B31-4354-AD0F-FE83226939E9
:END:
** OS For Mainframes
:PROPERTIES:
:ID:       A1AF2D25-EF35-45E0-A085-9487826DD8B7
:END:
*** IBM360
:PROPERTIES:
:ID:       8A913B91-E03C-4348-9AF3-9FE55CA7290D
:END:
- International Business Machines
- Programmed using punchcards
- The [[id:D289CD47-38F4-481F-BED1-FEAF25C4D709][OS]]:
  - [[id:D9F3E442-3F6C-48DF-A404-283C7A15CFBA][Batch OS]]
  - Still interact with hardware directly
  - Code gains some additional information from the OS

*** Improvements
- CPU is idle when doing I/O, so we should run other tasks
- [[id:70308734-2797-4277-9DF1-5A145F773AC7][Multiprogramming]]
- [[id:6276534B-2CDD-4F8B-BD8A-73DDEA2C1A31][Time Sharing OS]]

** Minicomputer
- A smaller mainframe, adopting the same ideas about the [[id:A1AF2D25-EF35-45E0-A085-9487826DD8B7][OS]]
- Adoption of [[id:C4CA2869-8F42-446C-A25A-570E4765A00C][UNIX]], developed by AT&T

*** Examples
- PDP-11, 1970

* Client-Server Model
:PROPERTIES:
:ID:       FAAB67BF-9DDB-4AC3-AA45-472F439686EB
:END:
- A server acts as an intermediary between a client and another interface.
  - In the case of the OS, the clients are the programs and the interfaces are the hardware.

* Concurrency
:PROPERTIES:
:ID:       62A2FCE1-6909-4C5A-8D25-015D1F2FAAFA
:END:
- Jobs can be "active" at the same time, which means that the CPU can be processing multiple jobs at the same time.
- Note that this is not the same as parallel running.

* Users
:PROPERTIES:
:ID:       CEED7EB1-C9DD-40C6-ABBF-32D3E41FA6F7
:END:
- In the context of [[id:D289CD47-38F4-481F-BED1-FEAF25C4D709][OS]], the "user" is either the actual person, or the program that they are running.

* UNIX
:PROPERTIES:
:ID:       C4CA2869-8F42-446C-A25A-570E4765A00C
:END:
- An operating system developed by AT&T
- Inspired GNU/Linux, which is not UNIX

* Motivations for [[id:D289CD47-38F4-481F-BED1-FEAF25C4D709][OS]]
:PROPERTIES:
:ID:       187C6FEC-1472-4AC3-9C78-CD345A297436
:END:

** Abstraction
:PROPERTIES:
:ID:       F81C54C3-E2DF-4E15-9679-0FA58A23E3B0
:END:
- Hide low-level details from the [[id:CEED7EB1-C9DD-40C6-ABBF-32D3E41FA6F7][user]]
- User can perform tasks without an understanding of what the OS is doing
- User can perform tasks without caring what the specifics of the hardware is
- Provides
  - Efficiency
  - Programmability
  - Portability

** Resource Allocator
:PROPERTIES:
:ID:       9A7A50F0-44D7-465F-A377-ADDF2D53A8FA
:END:
- Barrier between [[id:CEED7EB1-C9DD-40C6-ABBF-32D3E41FA6F7][users]] and the resources
  - CPU
  - Memory
  - I/O devices
  - Other hardware

** Control Program
:PROPERTIES:
:ID:       760712ED-0C18-4C5E-A5E7-B3B1770D6E92
:END:
- Prevent programs from misusing the computer
  - Both accidentally (due to bugs)
  - And purposely (viruses)
- Ensure isolation between the multiple [[id:CEED7EB1-C9DD-40C6-ABBF-32D3E41FA6F7][users]].
- Control execution of the programs
  - Security
  - Isolation
  - Protection
  - Prevent errors
  - Prevent improper use

* Modern [[id:D289CD47-38F4-481F-BED1-FEAF25C4D709][OS]]
:PROPERTIES:
:ID:       f770e083-fe6b-4e22-ae67-3292bda84695
:END:
- Examples:
  - Desktop
    - Windows
    - macOS
    - Linux
  - Mobile
    - iOS
    - Android
  - Embedded
    - Raspibian
  - RTOS
    - freeRTOS (ESP32 my beloved)
** Features of Modern (Desktop) OS
- Multitasking
  - Concurrent execution of programs on multiple cores
  - # of programs >>> # of cores, how?
  - Switch between programs very fast, just like people
- Multiuser
  - Multiple users can be logged in and use at the same time
- Variety of Hardware
  - Single PCs, shared memory systems (10-100s of processors), ...
** Features of Modern (Mobile) OS
- Customized verson of PC OS which has software dedicated to mobile haredware such as cellular modems
** Features of Embedded OS
- Operating system which needs to address specialized hardware
- Has to consider more restrictions such as power and hardware
- Not general purpose, only runs in specific environments
- Mostly stored in read only memory
** Features of Real-Time OS
- When applications need to deal with real time input-output data, RTOS is used
  - "Fly by wire", needs to respond instantly to inputs
- Cannot add new software without rewriting the code
- Can be soft (missable) or hard (cannot miss) time constraints
** Features of Distributed OS
- OS for large networks of computers which can be loosly or tightly connected

* OS Structure
:PROPERTIES:
:ID:       8212b8c8-23c8-445a-9cd4-2a9fc44950f9
:END:
- Implementation of [[id:D289CD47-38F4-481F-BED1-FEAF25C4D709][OS]]
- Factors:
  - Flexibility
    - Easy to adapt
  - Robustness
    - Hard to break
  - Maintainability
    - Easy fo sysadmins to change things
  - Performance
    - Low overhead
- Runs in the kernel [[id:79d9b1f3-2e86-41b0-a5a7-d56a31ada65d][Protection Mode]]
- Programs running under the operating system run in the user [[id:79d9b1f3-2e86-41b0-a5a7-d56a31ada65d][Protection Mode]]
- Libraries may directly interact with the hardware, others may talk to the OS instead
- System processes are OS processes that help with the functionality, but may be run under the user [[id:79d9b1f3-2e86-41b0-a5a7-d56a31ada65d][Protection Mode]].
- User programs may also talk to the OS directly, through the library, or directly to the hardware
- [[file:media/os-structure_1.png][OS Structure Diagram]]
* Kernel Organization
:PROPERTIES:
:ID:       dbdda23c-3747-4896-abec-6cd72a98cc93
:END:
- [[id:D289CD47-38F4-481F-BED1-FEAF25C4D709][OS]] also known as the kernel
  - Deals with hardware issues
  - Provides system call interface
  - Special code which allows user programs to use interrupt handlers and device drivers
  - Kernel code does not have access to system calls (of courses), normal libraries, or normal IO
    - "Code targets bare metal"
    - Code written in higher level compiled langauges like C/C++/ðŸ¦€
      - Previously written in assembly
    - Heaviliy hardware dependant
    - How do you debug
    - Code is split into machine independant HLL code, machine depandant HLL code, and assembly code
** Kernel Types
*** Monolithic Kernel
:PROPERTIES:
:ID:       89c5da4b-e47d-46be-b73a-db52dfc13241
:END:
- Large kernel which includes most of the non-user code running on the computer
- Drivers run within the monolith, which can cause BSOD/Crashes
- [[file:media/monolithic-kernel_1.png][Monolithic Kernel]]
*** Microkernel
:PROPERTIES:
:ID:       f932193f-1834-49e7-b2fa-631d4f008cec
:END:
- Small and clean
- Only essential services
- Other services are ran outside the kernel to provide resiliance
- [[file:media/microkernel_1.png][Microkernel]]

* Protection Mode
:PROPERTIES:
:ID:       79d9b1f3-2e86-41b0-a5a7-d56a31ada65d
:END:
- Hardware enforces protection modes which allow some instructions to only be run by certain privieged programs
- In a coarse overview, there are kernel and user modes
* VMs
:PROPERTIES:
:ID:       2240ad3a-9c58-44ab-adc8-f53388009f72
:END:
- What if you want to run more than one [[id:D289CD47-38F4-481F-BED1-FEAF25C4D709][Operating System]]?
- Use a virtual machine
- Virtualizes some underlying hardware that the OS expects
  - The layer in charge of this is called the [[id:a8b405f0-555f-43d2-af3f-93a38a43dd5c][Hypervisor]]
* Hypervisor
:PROPERTIES:
:ID:       a8b405f0-555f-43d2-af3f-93a38a43dd5c
:END:
- Type one hypervisor OS
  - Runs directly on the OS, may be stored in the ROM or BIOS
  - [[file:media/type-1-hypervisor_1.png][Type 1 Hypervisor]]
- Type two hypervisor
  - Runs above the OS
  - [[file:media/type-2-hypervisor_2.png][Type 2 Hypervisor]]
- WSL
- Docker/Kubernetes (container engines)

* Process Abstraction
:PROPERTIES:
:ID:       bbf11da3-2536-43e2-b1d7-93c46b3bf3ba
:END:
- Work queue
  - Workers take work from a work queue and execute them
- Master-slave
  - A main unit instructs worker units to work on different tasks
* Program Execution
:PROPERTIES:
:ID:       8245e915-ceba-4c96-9183-ce12f38f7b31
:END:
- Memory space is split amongst the different requirements of the program
- [[file:media/memory_1.png][Memory]]
- *Executable file format stores the instruction to the [[id:D289CD47-38F4-481F-BED1-FEAF25C4D709][OS]] on how to construct the process*
  - The file is a blueprint for the processes
  - Contains Instructions and Data
  - What address is the program located at?
  - During runtime, it also contains:
    - Text and Data (memory context)
** Hardware Layout
:PROPERTIES:
:ID:       2a0d3e9a-b060-4725-9cd2-882e52a9c356
:END:
- Memory is slower than registers
- Memory cache is used to speed up memory access
  - SRAM close (inside) the CPU
- Fetch unit grabs data from memory into the registers
  - Program Counter to indicate current program
- Registers come in general and special
  - General is used by programs to store data for instructions
  - Special is used for specific purpose
    - Stack Pointer
    - Program Counter
    - Frame Pointer
- [[file:media/hardware_1.png][Hardware]]
** Function Call
:PROPERTIES:
:ID:       8b9d71e1-fde5-4517-999a-64f413207b37
:END:
- Problems we need to solve:
  - How do we allocate data for the variables?
  - Where do we put the function such that it won't get mixed up?
- Caller function calls the Callee
  - Jump to the function body
  - Execute
  - Jump back to the original location
  - On the way, we need to store parameters and outputs
- These give rise to using a stack to store data
- In the stack, there will be a region called the [[id:1e0a4e58-4815-44c6-8872-000dd5c6e8b4][Stack Frame]]
- A stack pointer points to the top of the [[id:22f8b191-cc90-4c01-b9f5-10f78d597b42][Stack]]
- Basic Linkage
  - As calls are created, data is created on a stack
    - Command jump and link "jal" is used to jump to the callee and save the PC of the caller
    - Arguments stored in argument registers or the stack
  - As calls return, data is popped back off the stack
    - Jump back to the ra register
    - ra register must be saved if you want to further call a function
    - Save return values in return registers or the stack
    - Push back callee saved registers from the stack
- Frame-based linkage
  - The callee must:
    - Allocate space on the stack by creating a frame pointer with enough space to store all its variables, then move the stack pointer to where the frame pointer is
    - Stack may continue to grow if other functions are called
    - Finally, restore fp to the orginal value (since it is callee-saved) by adding to the stack pointer and storing in the frame pointer
  - This gives the function stack space to store variables
- The methods differ based on hardware and programming language, but must preserve certain states
  - This is known as the calling convention and must be consistant
** Stack
:PROPERTIES:
:ID:       22f8b191-cc90-4c01-b9f5-10f78d597b42
:END:
- A FIFO list
- Grows in one direction
- A stack pointer points to the top
- Composed by [[id:1e0a4e58-4815-44c6-8872-000dd5c6e8b4][Stack Frames]]
** Stack Frame
:PROPERTIES:
:ID:       1e0a4e58-4815-44c6-8872-000dd5c6e8b4
:END:
- Stores things like
  - Return address
  - Arguments
  - Local variable storage
  - Register data
